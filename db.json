{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/learn-git-in-developement.md","hash":"fad56dcbab5091bb0c4086d61c219b2e8b0182c5","modified":1644907732152},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1644906867897},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1644906867892},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1644906867892},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1644906867892},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1644906867893},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1644906867892},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1644906867895},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1644906867893},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1644906867893},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1644906867895},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1644906867895},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1644906867895},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1644906867896},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1644906867897},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1644906867896},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1644906867896},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1644906867897},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1644906867896},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1644906867897},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1644906867897},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1644906867894},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1644906867897},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1644906867898},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1644906867894},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1644906867898},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1644906867898},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1644906867898},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1644906867898},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1644906867899},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1644906867899},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1644906867899},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1644906867900},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1644906867901},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1644906867901},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1644906867899},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1644906867901},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1644906867901},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1644906867901},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1644906867904},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1644906867904},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1644906867905},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1644906867905},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1644906867904},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1644906867905},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1644906867905},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1644906867904},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1644906867902},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1644906867904},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1644906867904},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1644906867906},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1644906867906},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1644906867902},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1644906867902},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1644906867902},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1644906867902},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1644906867903},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1644906867903},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1644906867911},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1644906867904},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1644906867911},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1644906867906},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1644906867912},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1644906867911},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1644906867910},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1644906867908},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1644906867907},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1644906867907},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1644906867908},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1644906867909},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1644906867908},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1644906867908},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1644906867908},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1644906867909},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1644906867909},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1644906867906},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1644906867907},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1644906867911},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1644906867910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1644906867910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1644906867912},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1644906867909},{"_id":"public/2022/02/15/learn-git-in-developement/index.html","hash":"14631d7652f4b69bff792f02b8552bd289ce1144","modified":1750523997715},{"_id":"public/2022/02/15/hello-world/index.html","hash":"7d4e7fc28ff50a50ca682a559551da5d8e0796d0","modified":1750523997715},{"_id":"public/index.html","hash":"2faadc08e9a480826c96b0e5d5e4c7c4f0285712","modified":1750523997715},{"_id":"public/archives/index.html","hash":"3bc835918a2a39d58e595ac658fd9c12f7e9c46d","modified":1750523997715},{"_id":"public/archives/2022/index.html","hash":"d1908d3d575e19ea29d49bd427f6c69799189166","modified":1750523997715},{"_id":"public/archives/2022/02/index.html","hash":"da17c7c70dd20d5a8f0158bd0bad0c9d0804a431","modified":1750523997715},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1750523670743},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1750523670743},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1750523670743},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1750523670743},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1750523670743},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1750523670743},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1750523670743},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1750523670743},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1750523670743},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1750523670743},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1750523670743},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1750523670743},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1750523670743},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1750523670743},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1750523670743},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1750523670743},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1750523670743},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1750523670743},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1750523670743},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1750523670743},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1750523670743},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1750523670743},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1750523670743},{"_id":"source/_posts/test.md","hash":"66092bd5a60fbe52025b48f3380ad685f94ed6c5","modified":1750523792941},{"_id":"public/2025/06/22/test/index.html","hash":"905c97996d049e34a88cbaa5c8241cc7e8f1f2b7","modified":1750523997715},{"_id":"public/archives/2025/index.html","hash":"97ac3a72abc82022ed0e029e1713ea82971e324b","modified":1750523997715},{"_id":"public/archives/2025/06/index.html","hash":"eb22ebd90eff897dbf49c8b4d946da2fdf0c3a11","modified":1750523997715},{"_id":"source/_posts/测试.md","hash":"1851fee378322a996f702f5a14cb9f98e5df0d16","modified":1750523986558},{"_id":"public/2025/06/22/测试/index.html","hash":"81c383997b0ac3cebb210593321975f949b4d1bf","modified":1750523997715},{"_id":"source/_posts/git.md","hash":"28c85f9fcedf178f8c66f3cd458fe0aa30b68414","modified":1750562878881},{"_id":"source/_posts/graphql看懂这篇直接开发.md","hash":"665e04350e1b1cb5e07dea2b177f87c352b818ce","modified":1750562903095},{"_id":"source/_posts/检测后端接口常见方法.md","hash":"94f135468c9369f5b5088caf10b81210cdd4be78","modified":1750562825439},{"_id":"source/_posts/react前端下载后端返回的文件方法（url、二进制流）.md","hash":"2c953eb060008cbadde1b5d07f8c0203ea04edff","modified":1750562778102},{"_id":"source/_posts/每天一个新问题（永远保持怀疑）.md","hash":"6c447dee1d956662f4c2fa77fb69f31effa6bb78","modified":1750562841479},{"_id":"source/_posts/浏览器安全.md","hash":"7637a247968fb0b38ed82da6b774decb0bbb78bc","modified":1750562830663},{"_id":"source/_posts/git/gitrebase.png","hash":"e3ac521c51beec9a85729e143d2a631e0ac55cba","modified":1750556395183},{"_id":"source/_posts/浏览器安全/非对称加密.png","hash":"726f42224e3b820bfbe4b47ebafebeb19167c2c6","modified":1750556395197},{"_id":"source/_posts/浏览器安全/浏览器安全.png","hash":"aaa65f1b424822e96a61f3c10dd77c0aae002e57","modified":1750556395195},{"_id":"source/_posts/浏览器安全/渲染进程与浏览器内核.png","hash":"cb854a85ad39a93b2baaeae65eaa4bcc75b5fa17","modified":1750556395196},{"_id":"source/_posts/浏览器安全/对称加密.png","hash":"7577ee47393c6c5b4819b4df501846f09490d33d","modified":1750556395191},{"_id":"source/_posts/浏览器安全/数字证书.png","hash":"a2c25869488db97bf2a1b5af4a880750d084b9de","modified":1750556395194},{"_id":"source/_posts/浏览器安全/对称混合非对称加密.png","hash":"7a69595fc45ec1f465ab334ee943d6fdc9678741","modified":1750556395192},{"_id":"source/_posts/浏览器安全/安全沙箱.png","hash":"839a7becbfe936c8b2a7ab1671f4db10b90dc23c","modified":1750556395189},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538934},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538894},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538894},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538925},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538925},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538925},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538933},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1750559538933},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1750559538883},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1750559538883},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1750559538882},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1750559538885},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1750559538885},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1750559538884},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1750559538885},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1750559538885},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1750559538885},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1750559538885},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1750559538886},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1750559538886},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1750559538901},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1750559538887},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1750559538886},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1750559538886},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1750559538883},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1750559538883},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1750559538883},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1750559538887},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1750559538887},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1750559538888},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1750559538887},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1750559538884},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1750559538888},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1750559538887},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1750559538887},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1750559538888},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1750559538888},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1750559538888},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1750559538888},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1750559538888},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1750559538889},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1750559538889},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1750559538890},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1750559538889},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1750559538889},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1750559538900},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1750559538900},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1750559538901},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1750559538901},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1750559538901},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1750559538902},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1750559538902},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1750559538900},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1750559538900},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1750559539002},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1750559539001},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1750559538890},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1750559538889},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1750559538890},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1750559538890},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1750559539001},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1750559538891},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1750559538890},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1750559538890},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1750559538891},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1750559538891},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1750559538891},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1750559538892},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1750559538892},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1750559538891},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1750559538892},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1750559538892},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1750559538893},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1750559538893},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1750559538898},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1750559538898},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1750559538894},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1750559538898},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1750559538899},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1750559538898},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1750559538899},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1750559538934},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1750559538898},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1750559538934},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1750559538934},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1750559538935},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1750559538935},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1750559538937},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1750559538936},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1750559538936},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1750559538934},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1750559538937},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1750559538938},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1750559538937},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1750559538937},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1750559538938},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1750559538938},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1750559538938},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1750559538938},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1750559538902},{"_id":"themes/next/scripts/tags/exturl.js","hash":"919ab7496c0031020c7b7242486531b1f7a135a7","modified":1750559538903},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1750559538938},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1750559538938},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1750559538902},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1750559538903},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1750559538903},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1750559538904},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1750559538905},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1750559538905},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1750559538904},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1750559538892},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1750559538892},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1750559538892},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1750559538891},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1750559538893},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1750559538893},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1750559538893},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1750559538893},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1750559538893},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1750559538894},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1750559538894},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1750559538894},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1750559538895},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1750559538894},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1750559538894},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1750559538895},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1750559538895},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1750559538895},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1750559538895},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1750559538895},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1750559538896},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1750559538896},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1750559538896},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1750559538897},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1750559538896},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1750559538897},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1750559538897},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1750559538897},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1750559538897},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1750559538897},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1750559538898},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1750559538897},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1750559538898},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1750559538898},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1750559538899},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1750559538900},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1750559538899},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1750559538900},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1750559538925},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1750559538925},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1750559538925},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1750559538924},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1750559538933},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1750559538933},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1750559538939},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1750559538939},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1750559538939},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1750559538933},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1750559538933},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1750559538939},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1750559538939},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1750559538940},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1750559538939},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1750559538940},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1750559538940},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1750559538940},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1750559538940},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1750559538947},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1750559538953},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1750559538950},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1750559538959},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1750559538959},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1750559538959},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1750559538959},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1750559538960},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1750559538961},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1750559538961},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1750559538961},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1750559538961},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1750559538954},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1750559538978},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1750559538954},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1750559538979},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1750559538980},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1750559538980},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1750559538982},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1750559538980},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1750559538982},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1750559538983},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1750559538983},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1750559538982},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1750559538983},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1750559538981},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1750559538983},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1750559538983},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1750559538984},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1750559538984},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1750559538984},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1750559538985},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1750559538985},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1750559538985},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1750559538979},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1750559538986},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1750559538986},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1750559538988},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1750559538996},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1750559538995},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1750559539000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1750559538999},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1750559539000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1750559538899},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1750559538989},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1750559538985},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1750559538906},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1750559538899},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1750559538906},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1750559538907},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1750559538918},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1750559538907},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1750559538923},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1750559538923},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1750559538910},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1750559538923},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1750559538924},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1750559538907},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1750559538924},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1750559538924},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1750559538926},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1750559538924},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1750559538926},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1750559538926},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1750559538926},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1750559538927},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1750559538927},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1750559538927},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1750559538927},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1750559538929},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1750559538929},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1750559538929},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1750559538930},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1750559538929},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1750559538930},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1750559538931},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1750559538931},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1750559538932},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1750559538932},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1750559538932},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1750559538940},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1750559538960},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1750559538944},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1750559538946},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1750559538960},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1750559538981},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1750559538963},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1750559538962},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1750559538954},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1750559538955},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1750559538962},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1750559538956},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1750559538955},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1750559538956},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1750559538956},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1750559538958},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1750559538995},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1750559538958},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1750559538907},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1750559538995},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1750559538907},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1750559538908},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1750559538958},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1750559538908},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1750559538909},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1750559538909},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1750559538909},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1750559538909},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1750559538909},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1750559538911},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1750559538910},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1750559538911},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1750559538912},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1750559538912},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1750559538913},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1750559538913},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1750559538913},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1750559538913},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1750559538915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1750559538915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1750559538915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1750559538916},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1750559538914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1750559538917},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1750559538916},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1750559538917},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1750559538917},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1750559538918},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1750559538918},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1750559538917},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1750559538918},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1750559538917},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1750559538919},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1750559538920},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1750559538919},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1750559538920},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1750559538920},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1750559538920},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1750559538921},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1750559538921},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1750559538922},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1750559538921},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1750559538922},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1750559538922},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1750559538922},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1750559538922},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1750559538928},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1750559538923},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1750559538928},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1750559538930},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1750559538941},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1750559538941},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1750559538957},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1750559538942},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1750559538943},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1750559538956},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1750559538957},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1750559538957},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1750559538942},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1750559538958},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1750559538958},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1750559538921},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1750559538943},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1750559538978},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1750559538944},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1750559538976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1750559538977},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1750559538968},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1750559538964},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1750559538976},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1750559538997},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1750559538949},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1750559538971},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1750559538992},{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1750560850108},{"_id":"themes/3-hexo/README.md","hash":"d3b65547645e6cb494409969fe93bc824450b888","modified":1750560850109},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1750560850108},{"_id":"themes/3-hexo/_config.yml","hash":"a3fd15133e4a770cfbad56c3d5310e113feb4b79","modified":1750567890765},{"_id":"themes/3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1750560850140},{"_id":"themes/3-hexo/layout/indexs.md","hash":"74b669b387e81b219fbd57673afd2e11beeb9822","modified":1750565888682},{"_id":"themes/3-hexo/languages/en.yml","hash":"85fb1d7f8b704febedc247aeda19bc3c30bbc088","modified":1750560850112},{"_id":"themes/3-hexo/.DS_Store","hash":"9ab12139365896d15d7002d2dbf5640ed19bdff6","modified":1750560850104},{"_id":"themes/3-hexo/layout/post.ejs","hash":"955cfffb5605099de53eb5bd5306975122d69f33","modified":1750560850142},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"c907bf3b8ef0b89bcd3ab90836e6f834518d36ba","modified":1750560850113},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"e0ca22b2c49d5d0b0e1e64170356a523cd8a51bf","modified":1750560850115},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1750560850117},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1750560850116},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1750560850127},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1750560850126},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"82e715547344e7ba911d66b4ceacf7c011338bfc","modified":1750560850129},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"bf7723eac5b36dc99a3c97f5bb219ddd85cab8e4","modified":1750560850131},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1750560850130},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"76768204853a8a5e030a96d605a247f9686cf994","modified":1750560850132},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0e662956cbfcaf6c1666e5c30a1fe03461de685e","modified":1750560850107},{"_id":"themes/3-hexo/source/.DS_Store","hash":"7e1e04eb64d70d9be72d471c8f48f2442c4c92d0","modified":1750560850146},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1750560850133},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1750560850134},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"a14cf10e8af1f7e83d6514c0a2912e14a0b8b0bd","modified":1750560850136},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"cbad17074f7a44520b4c7dad5a515d6aaf5e1e14","modified":1750560850135},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1750560850138},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1750560850139},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1750560850188},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1750560850215},{"_id":"themes/3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1750560850218},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1750560850226},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1750560850227},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1750560850223},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"ff6386692255a95d1cdb6a0789ed5c221950a49d","modified":1750569061194},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1750560850221},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1750560850238},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1750560850242},{"_id":"themes/3-hexo/source/js/script.js","hash":"e369c9098c3448fb5c144d904154b7e15ca28f67","modified":1750560850239},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1750560850244},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1750560850120},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1750560850119},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1750560850236},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1750560850122},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1750560850123},{"_id":"themes/3-hexo/layout/_partial/comments/giscus.ejs","hash":"941e7598a76f64fb4c5048c328a0237d05ca1abc","modified":1750560850121},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1750560850124},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"be91620693ca62e0ca72ee26e7712eeac6a320e1","modified":1750560850125},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1750560850149},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1750560850152},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1750560850151},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1750560850150},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"d35df7f5e68880d1f1ebec541b816f8257fd42cb","modified":1750560850163},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"05dcaf21f281f8ce483562e66fc31bc0fe8a2171","modified":1750560850164},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1750560850166},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1750560850162},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1750560850168},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1750560850191},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"7c307156ab5ea971b2414c79712e2e5932053ccf","modified":1750560850170},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1750560850190},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1750560850198},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1750560850203},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1750560850204},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1750560850205},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1750560850206},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1750560850208},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1750560850207},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1750560850201},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1750560850202},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1750560850210},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1750560850213},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1750560850211},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1750560850213},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1750560850214},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1750560850176},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1750560850173},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1750560850174},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1750560850182},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1750560850183},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1750560850180},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1750560850181},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1750560850187},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1750560850186},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1750560850178},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"ace01d0d9b0996c077d81bde61671db298ae95a0","modified":1750569061204},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1750560850235},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"2e622dbafa2b408baa1ab32df40c46ef67af6f93","modified":1750560850222},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1750560850232},{"_id":"themes/3-hexo/source/img/avatar.png","hash":"b351a5c400754a96de9fd517b48ebb54019fab45","modified":1750564408834}],"Category":[{"name":"git","_id":"cmc703iqn0002wvtkdcjga9kd"},{"name":"后端接口","_id":"cmc703iqr0007wvtkbl5th6is"},{"name":"下载","_id":"cmc703iqt000cwvtk75a39sp0"},{"name":"前端","_id":"cmc73ulad0000lrtk6bro3kqx"},{"name":"仓库管理","_id":"cmc73xulm0002hjtkfsf2bgfk"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-02-15T06:34:27.897Z","updated":"2022-02-15T06:34:27.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckznro0kj0000wufy295hcmiz","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"实战中开发git","date":"2022-05-22T13:34:00.000Z","comments":1,"_content":"# 初始化仓库\n\ngit init\n\n## 克隆仓库\n\ngit clone git地址\n\n## 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)\n\ngit config --global user,name \"用户名\"\ngit config --global user.email \"用户邮箱\"\n\n## 链接远程仓库\n\ngit remote add origin git地址\n\n### 当修改密码后需要git push 时报http denied错误时\n输入”git config –system –unset credential.helper”命令（重置远程端的用户名和密码）\n或\ngit config --global http.emptyAuth true \n### 当本地查看远程分支时\n###     ** git fetch origin。拉取远程分支列表\n\n|git branch  |  |  |\n| --- | --- | --- |\n| | 空 |查看本地分支|\n|  |-r  | 查看远程分支 |\n|  | -a  | 查看全部焚毁  |\n\n# 撤销git add . 的方法 -> git restore .\n\n## 撤销git commit -m \"注释\"，\n\n| git reset | --hard | 删除工作空间改动代码，撤销git add，撤销commit . 注意完成这个操作后，就恢复到了上一次的commit状态。 |\n| --- | --- | --- |\n|  | --mixed | 不删除工作空间改动代码，撤销git add，撤销commit .为默认参数,git reset --mixed HEAD^==git reset HEAD^ |\n|  | --sort | 不删除工作空间改动代码，不撤销git add ，撤销commit|\n| git commit  | --amend | 如果commit注释写错了，改一下注释 |\n\n## 推送仓库\n\n| git push | -u | 建立+推送远程分支 |\n| --- | --- | --- |\n|  | -f | 强制覆盖远程分支 |\n\n### 暂时存储工作区代码，（可以在分支间横跳代码）\n\n| git stash save \"save message\" | 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。 |\n| --- | --- |\n| git stash list | 查看stash了哪些存储 |\n| git stash show | 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1} |\n| git stash show -p | 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p |\n| git stash apply | 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} |\n| git stash pop | 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1} |\n| git stash drop stash@{$num} | 丢弃stash@{$num}存储，从列表中删除这个存储 |\n| git stash clear | 删除所有缓存的stash |\n\n# 创建分支\n\ngit branch test: 基于当前commit创建test分支。.git/HEAD 文件中记录了当前分支名字。\ngit checkout -b test; 创建并切换到test分支\n\n# 删除分支\n\ngit branch -d test：删除本地test分支\n\ngit branch -D test： test分支还没有合入当前分支，所以要用-D参数才能删掉。\n\ngit push origin --delete test 删除远程test分支\n\ngit push origin :test 删除远程test分支\n\n# 查看分支\n\n|git  | branch |空  |列出当前分支清单  |\n| --- | --- | --- | --- |\n|  |  | -r | 查看远程分支 |\n|  |  |-a  | 查看远程分支和本地分支 |\n|  |  | -v |查看各个分支最后一个提交信息  |\n|  |  |--merged  | 查看哪些分支已经合并入当前分支 |\n\n\n# 拉取分支\n\ngit fetch origin 同步远程服务器的数据到本地\n\ngit checkout -b test origin/test\\_remote 将远程分支test\\_remote拉取下来到本地test分支\n\ngit checkout test 将远程分支test拉取下来到本地test分支\n\ngit pull test从远程分支test 中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test\n\n## git merge的参数\nmerge的两个分支要有历史关联，没有的话需要添加git merge master --allow-unrelated-histories，参数。\n\n|git  |  merge |  | 合并分支到当前分支 |\n| --- | --- | --- | --- |\n|  |  | --ff  | 快速合并，这个是默认的参数。如果合并过程出现冲突，Git会显示出冲突并等待手动解决 |\n|  |  |--ff-only  | 只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge  |\n|  |  |--no-ff   | 不使用快速合并。会生成一次新的提交记录，这个记录只是标识在这里进行了一次merge操作（目前还没想到应用场景） |\n|  |  | --squash | 压缩合并。将待合并的分支的内容压缩成一个新的提交合并进来 |\n\n## git rebase的参数\n\n| git | rebase | 分布湿合并分支 |\n| --- | --- | --- |\n|-i HEAD~num  | 合并后num个commit记录 | p表示采用，s表示将当前commit合并到上一commit，d表示删除当前commit，。。。 |\n|-i [start] [end]  | 左开右闭 | start和end分别代码commit id |\n|-i [start] [end]  | onto [newbase] | 将部分分支复制到新commit上，实现中间一大段commit的删除 |\n通过git rebase -i [start] [end] 或者 git rebase -i HEAD~num将本地的多次提交合并为一个，以简化提交历史。(左开右闭)\n\n![截屏2021-12-01 18.38.28.png](gitrebase.png)\n在用d时可删除部分分支。s时前面得有pick，\n本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)\n### 复制部分分支\n\ngit rebase \\[startpoint\\] \\[endpoint\\] \\-\\-onto \\[branchName\\] （\\[startpoint\\] \\[endpoint\\]指定的是一个前开后闭的区间，将该区间中的分支复制到另一个分支上）\n运行git rebase --continue命令继续变基。\n运行git rebase --abort命令回到rebase之前的状态。\n个人见解，rebase就是操作本地的提交记录实现对commit的简化。git rebase branchname，在次合并分支，解决冲突，将冲突解决在开发分支上，避免主分支上出现脏分支记录。\n\n# git commit 记录查询\n\n|  git | show | 空 |.查看最新的commit|\n| --- | --- | --- | --- |\n|  |  | commitId  | .查看指定commit hashID的所有修改：|\n|  |  | commitId fileName |.查看某次commit中具体某个文件的修改： |","source":"_posts/git.md","raw":"---\ntitle: 实战中开发git\ndate: 2022-05-22 21:34:00\ntags: git\ncategories: 仓库管理\ncomments: true\n---\n# 初始化仓库\n\ngit init\n\n## 克隆仓库\n\ngit clone git地址\n\n## 设置用户名和邮箱(--global 为全局参数，表明本地所有Git仓库都会使用这个配置)\n\ngit config --global user,name \"用户名\"\ngit config --global user.email \"用户邮箱\"\n\n## 链接远程仓库\n\ngit remote add origin git地址\n\n### 当修改密码后需要git push 时报http denied错误时\n输入”git config –system –unset credential.helper”命令（重置远程端的用户名和密码）\n或\ngit config --global http.emptyAuth true \n### 当本地查看远程分支时\n###     ** git fetch origin。拉取远程分支列表\n\n|git branch  |  |  |\n| --- | --- | --- |\n| | 空 |查看本地分支|\n|  |-r  | 查看远程分支 |\n|  | -a  | 查看全部焚毁  |\n\n# 撤销git add . 的方法 -> git restore .\n\n## 撤销git commit -m \"注释\"，\n\n| git reset | --hard | 删除工作空间改动代码，撤销git add，撤销commit . 注意完成这个操作后，就恢复到了上一次的commit状态。 |\n| --- | --- | --- |\n|  | --mixed | 不删除工作空间改动代码，撤销git add，撤销commit .为默认参数,git reset --mixed HEAD^==git reset HEAD^ |\n|  | --sort | 不删除工作空间改动代码，不撤销git add ，撤销commit|\n| git commit  | --amend | 如果commit注释写错了，改一下注释 |\n\n## 推送仓库\n\n| git push | -u | 建立+推送远程分支 |\n| --- | --- | --- |\n|  | -f | 强制覆盖远程分支 |\n\n### 暂时存储工作区代码，（可以在分支间横跳代码）\n\n| git stash save \"save message\" | 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。 |\n| --- | --- |\n| git stash list | 查看stash了哪些存储 |\n| git stash show | 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1} |\n| git stash show -p | 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p |\n| git stash apply | 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} |\n| git stash pop | 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1} |\n| git stash drop stash@{$num} | 丢弃stash@{$num}存储，从列表中删除这个存储 |\n| git stash clear | 删除所有缓存的stash |\n\n# 创建分支\n\ngit branch test: 基于当前commit创建test分支。.git/HEAD 文件中记录了当前分支名字。\ngit checkout -b test; 创建并切换到test分支\n\n# 删除分支\n\ngit branch -d test：删除本地test分支\n\ngit branch -D test： test分支还没有合入当前分支，所以要用-D参数才能删掉。\n\ngit push origin --delete test 删除远程test分支\n\ngit push origin :test 删除远程test分支\n\n# 查看分支\n\n|git  | branch |空  |列出当前分支清单  |\n| --- | --- | --- | --- |\n|  |  | -r | 查看远程分支 |\n|  |  |-a  | 查看远程分支和本地分支 |\n|  |  | -v |查看各个分支最后一个提交信息  |\n|  |  |--merged  | 查看哪些分支已经合并入当前分支 |\n\n\n# 拉取分支\n\ngit fetch origin 同步远程服务器的数据到本地\n\ngit checkout -b test origin/test\\_remote 将远程分支test\\_remote拉取下来到本地test分支\n\ngit checkout test 将远程分支test拉取下来到本地test分支\n\ngit pull test从远程分支test 中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test\n\n## git merge的参数\nmerge的两个分支要有历史关联，没有的话需要添加git merge master --allow-unrelated-histories，参数。\n\n|git  |  merge |  | 合并分支到当前分支 |\n| --- | --- | --- | --- |\n|  |  | --ff  | 快速合并，这个是默认的参数。如果合并过程出现冲突，Git会显示出冲突并等待手动解决 |\n|  |  |--ff-only  | 只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge  |\n|  |  |--no-ff   | 不使用快速合并。会生成一次新的提交记录，这个记录只是标识在这里进行了一次merge操作（目前还没想到应用场景） |\n|  |  | --squash | 压缩合并。将待合并的分支的内容压缩成一个新的提交合并进来 |\n\n## git rebase的参数\n\n| git | rebase | 分布湿合并分支 |\n| --- | --- | --- |\n|-i HEAD~num  | 合并后num个commit记录 | p表示采用，s表示将当前commit合并到上一commit，d表示删除当前commit，。。。 |\n|-i [start] [end]  | 左开右闭 | start和end分别代码commit id |\n|-i [start] [end]  | onto [newbase] | 将部分分支复制到新commit上，实现中间一大段commit的删除 |\n通过git rebase -i [start] [end] 或者 git rebase -i HEAD~num将本地的多次提交合并为一个，以简化提交历史。(左开右闭)\n\n![截屏2021-12-01 18.38.28.png](gitrebase.png)\n在用d时可删除部分分支。s时前面得有pick，\n本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)\n### 复制部分分支\n\ngit rebase \\[startpoint\\] \\[endpoint\\] \\-\\-onto \\[branchName\\] （\\[startpoint\\] \\[endpoint\\]指定的是一个前开后闭的区间，将该区间中的分支复制到另一个分支上）\n运行git rebase --continue命令继续变基。\n运行git rebase --abort命令回到rebase之前的状态。\n个人见解，rebase就是操作本地的提交记录实现对commit的简化。git rebase branchname，在次合并分支，解决冲突，将冲突解决在开发分支上，避免主分支上出现脏分支记录。\n\n# git commit 记录查询\n\n|  git | show | 空 |.查看最新的commit|\n| --- | --- | --- | --- |\n|  |  | commitId  | .查看指定commit hashID的所有修改：|\n|  |  | commitId fileName |.查看某次commit中具体某个文件的修改： |","slug":"git","published":1,"updated":"2025-06-22T03:27:58.881Z","_id":"cmc703iqj0000wvtk5whbhk3u","layout":"post","photos":[],"link":"","content":"<h1 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h1><p>git init</p>\n<h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><p>git clone git地址</p>\n<h2 id=\"设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置\"><a href=\"#设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置\" class=\"headerlink\" title=\"设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)\"></a>设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)</h2><p>git config –global user,name “用户名”<br>git config –global user.email “用户邮箱”</p>\n<h2 id=\"链接远程仓库\"><a href=\"#链接远程仓库\" class=\"headerlink\" title=\"链接远程仓库\"></a>链接远程仓库</h2><p>git remote add origin git地址</p>\n<h3 id=\"当修改密码后需要git-push-时报http-denied错误时\"><a href=\"#当修改密码后需要git-push-时报http-denied错误时\" class=\"headerlink\" title=\"当修改密码后需要git push 时报http denied错误时\"></a>当修改密码后需要git push 时报http denied错误时</h3><p>输入”git config –system –unset credential.helper”命令（重置远程端的用户名和密码）<br>或<br>git config –global http.emptyAuth true </p>\n<h3 id=\"当本地查看远程分支时\"><a href=\"#当本地查看远程分支时\" class=\"headerlink\" title=\"当本地查看远程分支时\"></a>当本地查看远程分支时</h3><h3 id=\"git-fetch-origin。拉取远程分支列表\"><a href=\"#git-fetch-origin。拉取远程分支列表\" class=\"headerlink\" title=\"** git fetch origin。拉取远程分支列表\"></a>** git fetch origin。拉取远程分支列表</h3><table>\n<thead>\n<tr>\n<th>git branch</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>空</td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td></td>\n<td>-r</td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td></td>\n<td>-a</td>\n<td>查看全部焚毁</td>\n</tr>\n</tbody></table>\n<h1 id=\"撤销git-add-的方法-gt-git-restore\"><a href=\"#撤销git-add-的方法-gt-git-restore\" class=\"headerlink\" title=\"撤销git add . 的方法 -&gt; git restore .\"></a>撤销git add . 的方法 -&gt; git restore .</h1><h2 id=\"撤销git-commit-m-“注释”，\"><a href=\"#撤销git-commit-m-“注释”，\" class=\"headerlink\" title=\"撤销git commit -m “注释”，\"></a>撤销git commit -m “注释”，</h2><table>\n<thead>\n<tr>\n<th>git reset</th>\n<th>–hard</th>\n<th>删除工作空间改动代码，撤销git add，撤销commit . 注意完成这个操作后，就恢复到了上一次的commit状态。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>–mixed</td>\n<td>不删除工作空间改动代码，撤销git add，撤销commit .为默认参数,git reset –mixed HEAD^==git reset HEAD^</td>\n</tr>\n<tr>\n<td></td>\n<td>–sort</td>\n<td>不删除工作空间改动代码，不撤销git add ，撤销commit</td>\n</tr>\n<tr>\n<td>git commit</td>\n<td>–amend</td>\n<td>如果commit注释写错了，改一下注释</td>\n</tr>\n</tbody></table>\n<h2 id=\"推送仓库\"><a href=\"#推送仓库\" class=\"headerlink\" title=\"推送仓库\"></a>推送仓库</h2><table>\n<thead>\n<tr>\n<th>git push</th>\n<th>-u</th>\n<th>建立+推送远程分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>-f</td>\n<td>强制覆盖远程分支</td>\n</tr>\n</tbody></table>\n<h3 id=\"暂时存储工作区代码，（可以在分支间横跳代码）\"><a href=\"#暂时存储工作区代码，（可以在分支间横跳代码）\" class=\"headerlink\" title=\"暂时存储工作区代码，（可以在分支间横跳代码）\"></a>暂时存储工作区代码，（可以在分支间横跳代码）</h3><table>\n<thead>\n<tr>\n<th>git stash save “save message”</th>\n<th>执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git stash list</td>\n<td>查看stash了哪些存储</td>\n</tr>\n<tr>\n<td>git stash show</td>\n<td>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</td>\n</tr>\n<tr>\n<td>git stash show -p</td>\n<td>显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p</td>\n</tr>\n<tr>\n<td>git stash apply</td>\n<td>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}</td>\n</tr>\n<tr>\n<td>git stash pop</td>\n<td>命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</td>\n</tr>\n<tr>\n<td>git stash drop stash@{$num}</td>\n<td>丢弃stash@{$num}存储，从列表中删除这个存储</td>\n</tr>\n<tr>\n<td>git stash clear</td>\n<td>删除所有缓存的stash</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h1><p>git branch test: 基于当前commit创建test分支。.git/HEAD 文件中记录了当前分支名字。<br>git checkout -b test; 创建并切换到test分支</p>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><p>git branch -d test：删除本地test分支</p>\n<p>git branch -D test： test分支还没有合入当前分支，所以要用-D参数才能删掉。</p>\n<p>git push origin –delete test 删除远程test分支</p>\n<p>git push origin :test 删除远程test分支</p>\n<h1 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h1><table>\n<thead>\n<tr>\n<th>git</th>\n<th>branch</th>\n<th>空</th>\n<th>列出当前分支清单</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>-r</td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>-a</td>\n<td>查看远程分支和本地分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>-v</td>\n<td>查看各个分支最后一个提交信息</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–merged</td>\n<td>查看哪些分支已经合并入当前分支</td>\n</tr>\n</tbody></table>\n<h1 id=\"拉取分支\"><a href=\"#拉取分支\" class=\"headerlink\" title=\"拉取分支\"></a>拉取分支</h1><p>git fetch origin 同步远程服务器的数据到本地</p>\n<p>git checkout -b test origin/test_remote 将远程分支test_remote拉取下来到本地test分支</p>\n<p>git checkout test 将远程分支test拉取下来到本地test分支</p>\n<p>git pull test从远程分支test 中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test</p>\n<h2 id=\"git-merge的参数\"><a href=\"#git-merge的参数\" class=\"headerlink\" title=\"git merge的参数\"></a>git merge的参数</h2><p>merge的两个分支要有历史关联，没有的话需要添加git merge master –allow-unrelated-histories，参数。</p>\n<table>\n<thead>\n<tr>\n<th>git</th>\n<th>merge</th>\n<th></th>\n<th>合并分支到当前分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>–ff</td>\n<td>快速合并，这个是默认的参数。如果合并过程出现冲突，Git会显示出冲突并等待手动解决</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–ff-only</td>\n<td>只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–no-ff</td>\n<td>不使用快速合并。会生成一次新的提交记录，这个记录只是标识在这里进行了一次merge操作（目前还没想到应用场景）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–squash</td>\n<td>压缩合并。将待合并的分支的内容压缩成一个新的提交合并进来</td>\n</tr>\n</tbody></table>\n<h2 id=\"git-rebase的参数\"><a href=\"#git-rebase的参数\" class=\"headerlink\" title=\"git rebase的参数\"></a>git rebase的参数</h2><table>\n<thead>\n<tr>\n<th>git</th>\n<th>rebase</th>\n<th>分布湿合并分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i HEAD~num</td>\n<td>合并后num个commit记录</td>\n<td>p表示采用，s表示将当前commit合并到上一commit，d表示删除当前commit，。。。</td>\n</tr>\n<tr>\n<td>-i [start] [end]</td>\n<td>左开右闭</td>\n<td>start和end分别代码commit id</td>\n</tr>\n<tr>\n<td>-i [start] [end]</td>\n<td>onto [newbase]</td>\n<td>将部分分支复制到新commit上，实现中间一大段commit的删除</td>\n</tr>\n<tr>\n<td>通过git rebase -i [start] [end] 或者 git rebase -i HEAD~num将本地的多次提交合并为一个，以简化提交历史。(左开右闭)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"gitrebase.png\" alt=\"截屏2021-12-01 18.38.28.png\"><br>在用d时可删除部分分支。s时前面得有pick，<br>本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)</p>\n<h3 id=\"复制部分分支\"><a href=\"#复制部分分支\" class=\"headerlink\" title=\"复制部分分支\"></a>复制部分分支</h3><p>git rebase [startpoint] [endpoint] --onto [branchName] （[startpoint] [endpoint]指定的是一个前开后闭的区间，将该区间中的分支复制到另一个分支上）<br>运行git rebase –continue命令继续变基。<br>运行git rebase –abort命令回到rebase之前的状态。<br>个人见解，rebase就是操作本地的提交记录实现对commit的简化。git rebase branchname，在次合并分支，解决冲突，将冲突解决在开发分支上，避免主分支上出现脏分支记录。</p>\n<h1 id=\"git-commit-记录查询\"><a href=\"#git-commit-记录查询\" class=\"headerlink\" title=\"git commit 记录查询\"></a>git commit 记录查询</h1><table>\n<thead>\n<tr>\n<th>git</th>\n<th>show</th>\n<th>空</th>\n<th>.查看最新的commit</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>commitId</td>\n<td>.查看指定commit hashID的所有修改：</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>commitId fileName</td>\n<td>.查看某次commit中具体某个文件的修改：</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h1><p>git init</p>\n<h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><p>git clone git地址</p>\n<h2 id=\"设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置\"><a href=\"#设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置\" class=\"headerlink\" title=\"设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)\"></a>设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)</h2><p>git config –global user,name “用户名”<br>git config –global user.email “用户邮箱”</p>\n<h2 id=\"链接远程仓库\"><a href=\"#链接远程仓库\" class=\"headerlink\" title=\"链接远程仓库\"></a>链接远程仓库</h2><p>git remote add origin git地址</p>\n<h3 id=\"当修改密码后需要git-push-时报http-denied错误时\"><a href=\"#当修改密码后需要git-push-时报http-denied错误时\" class=\"headerlink\" title=\"当修改密码后需要git push 时报http denied错误时\"></a>当修改密码后需要git push 时报http denied错误时</h3><p>输入”git config –system –unset credential.helper”命令（重置远程端的用户名和密码）<br>或<br>git config –global http.emptyAuth true </p>\n<h3 id=\"当本地查看远程分支时\"><a href=\"#当本地查看远程分支时\" class=\"headerlink\" title=\"当本地查看远程分支时\"></a>当本地查看远程分支时</h3><h3 id=\"git-fetch-origin。拉取远程分支列表\"><a href=\"#git-fetch-origin。拉取远程分支列表\" class=\"headerlink\" title=\"** git fetch origin。拉取远程分支列表\"></a>** git fetch origin。拉取远程分支列表</h3><table>\n<thead>\n<tr>\n<th>git branch</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>空</td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td></td>\n<td>-r</td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td></td>\n<td>-a</td>\n<td>查看全部焚毁</td>\n</tr>\n</tbody></table>\n<h1 id=\"撤销git-add-的方法-gt-git-restore\"><a href=\"#撤销git-add-的方法-gt-git-restore\" class=\"headerlink\" title=\"撤销git add . 的方法 -&gt; git restore .\"></a>撤销git add . 的方法 -&gt; git restore .</h1><h2 id=\"撤销git-commit-m-“注释”，\"><a href=\"#撤销git-commit-m-“注释”，\" class=\"headerlink\" title=\"撤销git commit -m “注释”，\"></a>撤销git commit -m “注释”，</h2><table>\n<thead>\n<tr>\n<th>git reset</th>\n<th>–hard</th>\n<th>删除工作空间改动代码，撤销git add，撤销commit . 注意完成这个操作后，就恢复到了上一次的commit状态。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>–mixed</td>\n<td>不删除工作空间改动代码，撤销git add，撤销commit .为默认参数,git reset –mixed HEAD^==git reset HEAD^</td>\n</tr>\n<tr>\n<td></td>\n<td>–sort</td>\n<td>不删除工作空间改动代码，不撤销git add ，撤销commit</td>\n</tr>\n<tr>\n<td>git commit</td>\n<td>–amend</td>\n<td>如果commit注释写错了，改一下注释</td>\n</tr>\n</tbody></table>\n<h2 id=\"推送仓库\"><a href=\"#推送仓库\" class=\"headerlink\" title=\"推送仓库\"></a>推送仓库</h2><table>\n<thead>\n<tr>\n<th>git push</th>\n<th>-u</th>\n<th>建立+推送远程分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>-f</td>\n<td>强制覆盖远程分支</td>\n</tr>\n</tbody></table>\n<h3 id=\"暂时存储工作区代码，（可以在分支间横跳代码）\"><a href=\"#暂时存储工作区代码，（可以在分支间横跳代码）\" class=\"headerlink\" title=\"暂时存储工作区代码，（可以在分支间横跳代码）\"></a>暂时存储工作区代码，（可以在分支间横跳代码）</h3><table>\n<thead>\n<tr>\n<th>git stash save “save message”</th>\n<th>执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git stash list</td>\n<td>查看stash了哪些存储</td>\n</tr>\n<tr>\n<td>git stash show</td>\n<td>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</td>\n</tr>\n<tr>\n<td>git stash show -p</td>\n<td>显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p</td>\n</tr>\n<tr>\n<td>git stash apply</td>\n<td>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}</td>\n</tr>\n<tr>\n<td>git stash pop</td>\n<td>命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</td>\n</tr>\n<tr>\n<td>git stash drop stash@{$num}</td>\n<td>丢弃stash@{$num}存储，从列表中删除这个存储</td>\n</tr>\n<tr>\n<td>git stash clear</td>\n<td>删除所有缓存的stash</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h1><p>git branch test: 基于当前commit创建test分支。.git/HEAD 文件中记录了当前分支名字。<br>git checkout -b test; 创建并切换到test分支</p>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><p>git branch -d test：删除本地test分支</p>\n<p>git branch -D test： test分支还没有合入当前分支，所以要用-D参数才能删掉。</p>\n<p>git push origin –delete test 删除远程test分支</p>\n<p>git push origin :test 删除远程test分支</p>\n<h1 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h1><table>\n<thead>\n<tr>\n<th>git</th>\n<th>branch</th>\n<th>空</th>\n<th>列出当前分支清单</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>-r</td>\n<td>查看远程分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>-a</td>\n<td>查看远程分支和本地分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>-v</td>\n<td>查看各个分支最后一个提交信息</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–merged</td>\n<td>查看哪些分支已经合并入当前分支</td>\n</tr>\n</tbody></table>\n<h1 id=\"拉取分支\"><a href=\"#拉取分支\" class=\"headerlink\" title=\"拉取分支\"></a>拉取分支</h1><p>git fetch origin 同步远程服务器的数据到本地</p>\n<p>git checkout -b test origin/test_remote 将远程分支test_remote拉取下来到本地test分支</p>\n<p>git checkout test 将远程分支test拉取下来到本地test分支</p>\n<p>git pull test从远程分支test 中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test</p>\n<h2 id=\"git-merge的参数\"><a href=\"#git-merge的参数\" class=\"headerlink\" title=\"git merge的参数\"></a>git merge的参数</h2><p>merge的两个分支要有历史关联，没有的话需要添加git merge master –allow-unrelated-histories，参数。</p>\n<table>\n<thead>\n<tr>\n<th>git</th>\n<th>merge</th>\n<th></th>\n<th>合并分支到当前分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>–ff</td>\n<td>快速合并，这个是默认的参数。如果合并过程出现冲突，Git会显示出冲突并等待手动解决</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–ff-only</td>\n<td>只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–no-ff</td>\n<td>不使用快速合并。会生成一次新的提交记录，这个记录只是标识在这里进行了一次merge操作（目前还没想到应用场景）</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>–squash</td>\n<td>压缩合并。将待合并的分支的内容压缩成一个新的提交合并进来</td>\n</tr>\n</tbody></table>\n<h2 id=\"git-rebase的参数\"><a href=\"#git-rebase的参数\" class=\"headerlink\" title=\"git rebase的参数\"></a>git rebase的参数</h2><table>\n<thead>\n<tr>\n<th>git</th>\n<th>rebase</th>\n<th>分布湿合并分支</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i HEAD~num</td>\n<td>合并后num个commit记录</td>\n<td>p表示采用，s表示将当前commit合并到上一commit，d表示删除当前commit，。。。</td>\n</tr>\n<tr>\n<td>-i [start] [end]</td>\n<td>左开右闭</td>\n<td>start和end分别代码commit id</td>\n</tr>\n<tr>\n<td>-i [start] [end]</td>\n<td>onto [newbase]</td>\n<td>将部分分支复制到新commit上，实现中间一大段commit的删除</td>\n</tr>\n<tr>\n<td>通过git rebase -i [start] [end] 或者 git rebase -i HEAD~num将本地的多次提交合并为一个，以简化提交历史。(左开右闭)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><img src=\"gitrebase.png\" alt=\"截屏2021-12-01 18.38.28.png\"><br>在用d时可删除部分分支。s时前面得有pick，<br>本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)</p>\n<h3 id=\"复制部分分支\"><a href=\"#复制部分分支\" class=\"headerlink\" title=\"复制部分分支\"></a>复制部分分支</h3><p>git rebase [startpoint] [endpoint] --onto [branchName] （[startpoint] [endpoint]指定的是一个前开后闭的区间，将该区间中的分支复制到另一个分支上）<br>运行git rebase –continue命令继续变基。<br>运行git rebase –abort命令回到rebase之前的状态。<br>个人见解，rebase就是操作本地的提交记录实现对commit的简化。git rebase branchname，在次合并分支，解决冲突，将冲突解决在开发分支上，避免主分支上出现脏分支记录。</p>\n<h1 id=\"git-commit-记录查询\"><a href=\"#git-commit-记录查询\" class=\"headerlink\" title=\"git commit 记录查询\"></a>git commit 记录查询</h1><table>\n<thead>\n<tr>\n<th>git</th>\n<th>show</th>\n<th>空</th>\n<th>.查看最新的commit</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>commitId</td>\n<td>.查看指定commit hashID的所有修改：</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>commitId fileName</td>\n<td>.查看某次commit中具体某个文件的修改：</td>\n</tr>\n</tbody></table>\n"},{"title":"graphql看懂这篇直接开发","date":"2022-08-28T09:44:15.000Z","_content":"# graphql的初尝\n\n## graphql\n\n### graphql在实战中踩坑\n\n- react-hoc(higherOrderComponent)\n\n\t- name\n\n\t\t- 改变返回值的名称\n\t\t- 定义mutate操作的名称\n\t\t- 此属性允许您配置传递给组件的props的名称。默认情况下，如果您传入的 GraphQL 文档graphql()是一个查询，那么您的 prop 将被命名为data. 如果你传递一个突变，那么你的props将被命名mutate。当您尝试对同一组件使用多个查询或突变时，这些默认名称虽然适当，但会发生冲突。为避免冲突，您可以使用config.name为每个查询或变异 HOC 的 prop 提供一个新名称。\n\n\t\t\t- export default graphName.HOC({name:'yourdefinedFunctionName',props:(yourdefinedFunctionName:{yourdefinedFunctionName,refetch,variables})=>{return {yourdefinedFunctionName,refetch,variables})\n\n\t- props\n\n\t\t- 参数为请求返回来的数据，若没有name，默认为data\n\t\t- 返回值为传给子组件的props，merge方式\n\n\t\t\t- const {yourdefinedFunctionName} = props\n\n\t- options\n\n\t\t- 参数为父组件传进来的数据\n\t\t- 返回值为发起请求中的参数\n\t\t- 值为对象或函数\n\n\t\t\t- options: props=>{const {id} = props return {variables:{id}}\n\n\t- skip\n\n\t\t- export default graphql(gql`{ ... }`, {\n  skip: props => !!props.skip,\n})(MyComponent);\n\t\t- 值为布尔值或函数，\n\n\t\t\t- true\n\n\t\t\t\t- 跳过该graphql\n\n\t\t\t\t\t- 应用场景，减少不必要的接口调用，比如，通过父组件传入的props属性值判断，第一次接口是否调用\n\n\t\t\t- 函数，\n\n\t\t\t\t- 参数为父组件传入的props\n\t\t\t\t- 返回值为true/flase\n\n\t- withref\n\n\t\t- 通过设置config.withRef为 true，您将能够使用高阶 GraphQL 组件getWrappedInstance实例上可用的方法从高阶 GraphQL 组件中获取包装组件的实例。\n\n\t- alias\n\n\t\t- 配置高阶组件包装器的名称\n\t\t- 主要用于devtool来判断当前的组件名称，排错时用的\n\n- 理论\n\n\t- GraphQL 是一种针对 Graph（图状数据）进行查询特别有优势的 Query Language（查询语言），所以叫做 GraphQL。GraphQL 最大的优势是查询图状数据。\n\n\t- 按需整合返回的数据\n\n- 与restful的区别\n\n\t- 资源\n\n\t\t- 相同点\n\n\t\t\t- 都有资源这个概念，而且都能通过ID去获取资源。\n\t\t\t- 都可以通过HTTP GET方式来获取资源。\n\t\t\t- 都可以使用JSON作为响应格式。\n\n\t\t- 不同点\n\n\t\t\t- 在REST中，你所访问的路径就是该资源的唯一标识（ID）；在GraphQL中，该标识与访问方式并不相关\n\t\t\t- 在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源\n\n\t- 路由\n\n\t\t- 相同点\n\n\t\t\t- REST API的URL端点列表与GraphQL的Query/Mutation中的字段类似，都表示数据的访问入口。\n\t\t\t- 都能用不同的方式描述一个API请求到底是读操作还是写操作。\n\n\t\t- 不同点\n\n\t\t\t- GraphQL让你可以通过一个资源入口访问到关联的其他资源，只要事先在schema中定义好资源之间的关系即可；而REST则提供了多个URL端点来获取相关的资源。\n\t\t\t- 在GraphQL中，Query类型可以在一个请求的根节点中被访问，除此以外它跟其他类型没有区别，比如你也可以对一个query中的字段添加参数。而在REST中，即使响应结果是嵌套关系，但在请求中并没有嵌套的概念。\n\t\t\t- REST使用POST这样的HTTP方法名称来定义写操作，GraphQL则是查询结构中的关键字。\n\n\t- 解析器\n\n\t\t- 相同点\n\n\t\t\t- REST的端点与GraphQL查询字段都在服务端调起函数执行。\n\t\t\t- REST和GraphQL都使用框架和类库来进行一些通用的网络协议处理。\n\n\t\t- 不同点\n\n\t\t\t- 一个REST请求对应一个路由处理器（Route Handler），而一个GraphQL的请求可以唤起多个解析器（Resolver）在一次响应中访问多种资源。\n\t\t\t- REST需要你自己构建整个请求的响应，而GraphQL的请求响应是由查询方指定结构、并由GraphQL进行构建组装的。\n\n- 截屏2022-06-30 11.54.48.png\n\n### 参考网址：https://www.apollographql.com/docs/react/v2/api/react-hoc\n\n","source":"_posts/graphql看懂这篇直接开发.md","raw":"---\ntitle: graphql看懂这篇直接开发\ndate: 2022-08-28 17:44:15\ntags: graphql\ncategories: 前端\n---\n# graphql的初尝\n\n## graphql\n\n### graphql在实战中踩坑\n\n- react-hoc(higherOrderComponent)\n\n\t- name\n\n\t\t- 改变返回值的名称\n\t\t- 定义mutate操作的名称\n\t\t- 此属性允许您配置传递给组件的props的名称。默认情况下，如果您传入的 GraphQL 文档graphql()是一个查询，那么您的 prop 将被命名为data. 如果你传递一个突变，那么你的props将被命名mutate。当您尝试对同一组件使用多个查询或突变时，这些默认名称虽然适当，但会发生冲突。为避免冲突，您可以使用config.name为每个查询或变异 HOC 的 prop 提供一个新名称。\n\n\t\t\t- export default graphName.HOC({name:'yourdefinedFunctionName',props:(yourdefinedFunctionName:{yourdefinedFunctionName,refetch,variables})=>{return {yourdefinedFunctionName,refetch,variables})\n\n\t- props\n\n\t\t- 参数为请求返回来的数据，若没有name，默认为data\n\t\t- 返回值为传给子组件的props，merge方式\n\n\t\t\t- const {yourdefinedFunctionName} = props\n\n\t- options\n\n\t\t- 参数为父组件传进来的数据\n\t\t- 返回值为发起请求中的参数\n\t\t- 值为对象或函数\n\n\t\t\t- options: props=>{const {id} = props return {variables:{id}}\n\n\t- skip\n\n\t\t- export default graphql(gql`{ ... }`, {\n  skip: props => !!props.skip,\n})(MyComponent);\n\t\t- 值为布尔值或函数，\n\n\t\t\t- true\n\n\t\t\t\t- 跳过该graphql\n\n\t\t\t\t\t- 应用场景，减少不必要的接口调用，比如，通过父组件传入的props属性值判断，第一次接口是否调用\n\n\t\t\t- 函数，\n\n\t\t\t\t- 参数为父组件传入的props\n\t\t\t\t- 返回值为true/flase\n\n\t- withref\n\n\t\t- 通过设置config.withRef为 true，您将能够使用高阶 GraphQL 组件getWrappedInstance实例上可用的方法从高阶 GraphQL 组件中获取包装组件的实例。\n\n\t- alias\n\n\t\t- 配置高阶组件包装器的名称\n\t\t- 主要用于devtool来判断当前的组件名称，排错时用的\n\n- 理论\n\n\t- GraphQL 是一种针对 Graph（图状数据）进行查询特别有优势的 Query Language（查询语言），所以叫做 GraphQL。GraphQL 最大的优势是查询图状数据。\n\n\t- 按需整合返回的数据\n\n- 与restful的区别\n\n\t- 资源\n\n\t\t- 相同点\n\n\t\t\t- 都有资源这个概念，而且都能通过ID去获取资源。\n\t\t\t- 都可以通过HTTP GET方式来获取资源。\n\t\t\t- 都可以使用JSON作为响应格式。\n\n\t\t- 不同点\n\n\t\t\t- 在REST中，你所访问的路径就是该资源的唯一标识（ID）；在GraphQL中，该标识与访问方式并不相关\n\t\t\t- 在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源\n\n\t- 路由\n\n\t\t- 相同点\n\n\t\t\t- REST API的URL端点列表与GraphQL的Query/Mutation中的字段类似，都表示数据的访问入口。\n\t\t\t- 都能用不同的方式描述一个API请求到底是读操作还是写操作。\n\n\t\t- 不同点\n\n\t\t\t- GraphQL让你可以通过一个资源入口访问到关联的其他资源，只要事先在schema中定义好资源之间的关系即可；而REST则提供了多个URL端点来获取相关的资源。\n\t\t\t- 在GraphQL中，Query类型可以在一个请求的根节点中被访问，除此以外它跟其他类型没有区别，比如你也可以对一个query中的字段添加参数。而在REST中，即使响应结果是嵌套关系，但在请求中并没有嵌套的概念。\n\t\t\t- REST使用POST这样的HTTP方法名称来定义写操作，GraphQL则是查询结构中的关键字。\n\n\t- 解析器\n\n\t\t- 相同点\n\n\t\t\t- REST的端点与GraphQL查询字段都在服务端调起函数执行。\n\t\t\t- REST和GraphQL都使用框架和类库来进行一些通用的网络协议处理。\n\n\t\t- 不同点\n\n\t\t\t- 一个REST请求对应一个路由处理器（Route Handler），而一个GraphQL的请求可以唤起多个解析器（Resolver）在一次响应中访问多种资源。\n\t\t\t- REST需要你自己构建整个请求的响应，而GraphQL的请求响应是由查询方指定结构、并由GraphQL进行构建组装的。\n\n- 截屏2022-06-30 11.54.48.png\n\n### 参考网址：https://www.apollographql.com/docs/react/v2/api/react-hoc\n\n","slug":"graphql看懂这篇直接开发","published":1,"updated":"2025-06-22T03:28:23.095Z","_id":"cmc703iqm0001wvtkgiwf9yy9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"graphql的初尝\"><a href=\"#graphql的初尝\" class=\"headerlink\" title=\"graphql的初尝\"></a>graphql的初尝</h1><h2 id=\"graphql\"><a href=\"#graphql\" class=\"headerlink\" title=\"graphql\"></a>graphql</h2><h3 id=\"graphql在实战中踩坑\"><a href=\"#graphql在实战中踩坑\" class=\"headerlink\" title=\"graphql在实战中踩坑\"></a>graphql在实战中踩坑</h3><ul>\n<li><p>react-hoc(higherOrderComponent)</p>\n<ul>\n<li><p>name</p>\n<ul>\n<li><p>改变返回值的名称</p>\n</li>\n<li><p>定义mutate操作的名称</p>\n</li>\n<li><p>此属性允许您配置传递给组件的props的名称。默认情况下，如果您传入的 GraphQL 文档graphql()是一个查询，那么您的 prop 将被命名为data. 如果你传递一个突变，那么你的props将被命名mutate。当您尝试对同一组件使用多个查询或突变时，这些默认名称虽然适当，但会发生冲突。为避免冲突，您可以使用config.name为每个查询或变异 HOC 的 prop 提供一个新名称。</p>\n<ul>\n<li>export default graphName.HOC({name:’yourdefinedFunctionName’,props:(yourdefinedFunctionName:{yourdefinedFunctionName,refetch,variables})=&gt;{return {yourdefinedFunctionName,refetch,variables})</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>参数为请求返回来的数据，若没有name，默认为data</p>\n</li>\n<li><p>返回值为传给子组件的props，merge方式</p>\n<ul>\n<li>const {yourdefinedFunctionName} = props</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>options</p>\n<ul>\n<li><p>参数为父组件传进来的数据</p>\n</li>\n<li><p>返回值为发起请求中的参数</p>\n</li>\n<li><p>值为对象或函数</p>\n<ul>\n<li>options: props=&gt;{const {id} = props return {variables:{id}}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>skip</p>\n<ul>\n<li><p>export default graphql(gql<code>&#123; ... &#125;</code>, {<br>skip: props =&gt; !!props.skip,<br>})(MyComponent);</p>\n</li>\n<li><p>值为布尔值或函数，</p>\n<ul>\n<li><p>true</p>\n<ul>\n<li><p>跳过该graphql</p>\n<ul>\n<li>应用场景，减少不必要的接口调用，比如，通过父组件传入的props属性值判断，第一次接口是否调用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>函数，</p>\n<ul>\n<li>参数为父组件传入的props</li>\n<li>返回值为true/flase</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>withref</p>\n<ul>\n<li>通过设置config.withRef为 true，您将能够使用高阶 GraphQL 组件getWrappedInstance实例上可用的方法从高阶 GraphQL 组件中获取包装组件的实例。</li>\n</ul>\n</li>\n<li><p>alias</p>\n<ul>\n<li>配置高阶组件包装器的名称</li>\n<li>主要用于devtool来判断当前的组件名称，排错时用的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>理论</p>\n<ul>\n<li><p>GraphQL 是一种针对 Graph（图状数据）进行查询特别有优势的 Query Language（查询语言），所以叫做 GraphQL。GraphQL 最大的优势是查询图状数据。</p>\n</li>\n<li><p>按需整合返回的数据</p>\n</li>\n</ul>\n</li>\n<li><p>与restful的区别</p>\n<ul>\n<li><p>资源</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>都有资源这个概念，而且都能通过ID去获取资源。</li>\n<li>都可以通过HTTP GET方式来获取资源。</li>\n<li>都可以使用JSON作为响应格式。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>在REST中，你所访问的路径就是该资源的唯一标识（ID）；在GraphQL中，该标识与访问方式并不相关</li>\n<li>在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>路由</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>REST API的URL端点列表与GraphQL的Query/Mutation中的字段类似，都表示数据的访问入口。</li>\n<li>都能用不同的方式描述一个API请求到底是读操作还是写操作。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>GraphQL让你可以通过一个资源入口访问到关联的其他资源，只要事先在schema中定义好资源之间的关系即可；而REST则提供了多个URL端点来获取相关的资源。</li>\n<li>在GraphQL中，Query类型可以在一个请求的根节点中被访问，除此以外它跟其他类型没有区别，比如你也可以对一个query中的字段添加参数。而在REST中，即使响应结果是嵌套关系，但在请求中并没有嵌套的概念。</li>\n<li>REST使用POST这样的HTTP方法名称来定义写操作，GraphQL则是查询结构中的关键字。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>解析器</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>REST的端点与GraphQL查询字段都在服务端调起函数执行。</li>\n<li>REST和GraphQL都使用框架和类库来进行一些通用的网络协议处理。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>一个REST请求对应一个路由处理器（Route Handler），而一个GraphQL的请求可以唤起多个解析器（Resolver）在一次响应中访问多种资源。</li>\n<li>REST需要你自己构建整个请求的响应，而GraphQL的请求响应是由查询方指定结构、并由GraphQL进行构建组装的。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>截屏2022-06-30 11.54.48.png</p>\n</li>\n</ul>\n<h3 id=\"参考网址：https-www-apollographql-com-docs-react-v2-api-react-hoc\"><a href=\"#参考网址：https-www-apollographql-com-docs-react-v2-api-react-hoc\" class=\"headerlink\" title=\"参考网址：https://www.apollographql.com/docs/react/v2/api/react-hoc\"></a>参考网址：<a href=\"https://www.apollographql.com/docs/react/v2/api/react-hoc\">https://www.apollographql.com/docs/react/v2/api/react-hoc</a></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"graphql的初尝\"><a href=\"#graphql的初尝\" class=\"headerlink\" title=\"graphql的初尝\"></a>graphql的初尝</h1><h2 id=\"graphql\"><a href=\"#graphql\" class=\"headerlink\" title=\"graphql\"></a>graphql</h2><h3 id=\"graphql在实战中踩坑\"><a href=\"#graphql在实战中踩坑\" class=\"headerlink\" title=\"graphql在实战中踩坑\"></a>graphql在实战中踩坑</h3><ul>\n<li><p>react-hoc(higherOrderComponent)</p>\n<ul>\n<li><p>name</p>\n<ul>\n<li><p>改变返回值的名称</p>\n</li>\n<li><p>定义mutate操作的名称</p>\n</li>\n<li><p>此属性允许您配置传递给组件的props的名称。默认情况下，如果您传入的 GraphQL 文档graphql()是一个查询，那么您的 prop 将被命名为data. 如果你传递一个突变，那么你的props将被命名mutate。当您尝试对同一组件使用多个查询或突变时，这些默认名称虽然适当，但会发生冲突。为避免冲突，您可以使用config.name为每个查询或变异 HOC 的 prop 提供一个新名称。</p>\n<ul>\n<li>export default graphName.HOC({name:’yourdefinedFunctionName’,props:(yourdefinedFunctionName:{yourdefinedFunctionName,refetch,variables})=&gt;{return {yourdefinedFunctionName,refetch,variables})</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>props</p>\n<ul>\n<li><p>参数为请求返回来的数据，若没有name，默认为data</p>\n</li>\n<li><p>返回值为传给子组件的props，merge方式</p>\n<ul>\n<li>const {yourdefinedFunctionName} = props</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>options</p>\n<ul>\n<li><p>参数为父组件传进来的数据</p>\n</li>\n<li><p>返回值为发起请求中的参数</p>\n</li>\n<li><p>值为对象或函数</p>\n<ul>\n<li>options: props=&gt;{const {id} = props return {variables:{id}}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>skip</p>\n<ul>\n<li><p>export default graphql(gql<code>&#123; ... &#125;</code>, {<br>skip: props =&gt; !!props.skip,<br>})(MyComponent);</p>\n</li>\n<li><p>值为布尔值或函数，</p>\n<ul>\n<li><p>true</p>\n<ul>\n<li><p>跳过该graphql</p>\n<ul>\n<li>应用场景，减少不必要的接口调用，比如，通过父组件传入的props属性值判断，第一次接口是否调用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>函数，</p>\n<ul>\n<li>参数为父组件传入的props</li>\n<li>返回值为true/flase</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>withref</p>\n<ul>\n<li>通过设置config.withRef为 true，您将能够使用高阶 GraphQL 组件getWrappedInstance实例上可用的方法从高阶 GraphQL 组件中获取包装组件的实例。</li>\n</ul>\n</li>\n<li><p>alias</p>\n<ul>\n<li>配置高阶组件包装器的名称</li>\n<li>主要用于devtool来判断当前的组件名称，排错时用的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>理论</p>\n<ul>\n<li><p>GraphQL 是一种针对 Graph（图状数据）进行查询特别有优势的 Query Language（查询语言），所以叫做 GraphQL。GraphQL 最大的优势是查询图状数据。</p>\n</li>\n<li><p>按需整合返回的数据</p>\n</li>\n</ul>\n</li>\n<li><p>与restful的区别</p>\n<ul>\n<li><p>资源</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>都有资源这个概念，而且都能通过ID去获取资源。</li>\n<li>都可以通过HTTP GET方式来获取资源。</li>\n<li>都可以使用JSON作为响应格式。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>在REST中，你所访问的路径就是该资源的唯一标识（ID）；在GraphQL中，该标识与访问方式并不相关</li>\n<li>在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>路由</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>REST API的URL端点列表与GraphQL的Query/Mutation中的字段类似，都表示数据的访问入口。</li>\n<li>都能用不同的方式描述一个API请求到底是读操作还是写操作。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>GraphQL让你可以通过一个资源入口访问到关联的其他资源，只要事先在schema中定义好资源之间的关系即可；而REST则提供了多个URL端点来获取相关的资源。</li>\n<li>在GraphQL中，Query类型可以在一个请求的根节点中被访问，除此以外它跟其他类型没有区别，比如你也可以对一个query中的字段添加参数。而在REST中，即使响应结果是嵌套关系，但在请求中并没有嵌套的概念。</li>\n<li>REST使用POST这样的HTTP方法名称来定义写操作，GraphQL则是查询结构中的关键字。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>解析器</p>\n<ul>\n<li><p>相同点</p>\n<ul>\n<li>REST的端点与GraphQL查询字段都在服务端调起函数执行。</li>\n<li>REST和GraphQL都使用框架和类库来进行一些通用的网络协议处理。</li>\n</ul>\n</li>\n<li><p>不同点</p>\n<ul>\n<li>一个REST请求对应一个路由处理器（Route Handler），而一个GraphQL的请求可以唤起多个解析器（Resolver）在一次响应中访问多种资源。</li>\n<li>REST需要你自己构建整个请求的响应，而GraphQL的请求响应是由查询方指定结构、并由GraphQL进行构建组装的。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>截屏2022-06-30 11.54.48.png</p>\n</li>\n</ul>\n<h3 id=\"参考网址：https-www-apollographql-com-docs-react-v2-api-react-hoc\"><a href=\"#参考网址：https-www-apollographql-com-docs-react-v2-api-react-hoc\" class=\"headerlink\" title=\"参考网址：https://www.apollographql.com/docs/react/v2/api/react-hoc\"></a>参考网址：<a href=\"https://www.apollographql.com/docs/react/v2/api/react-hoc\">https://www.apollographql.com/docs/react/v2/api/react-hoc</a></h3>"},{"title":"检测后端接口常见方法","date":"2022-05-22T14:36:45.000Z","_content":"### 痛点，常常由于不知道后端接口是否可用而苦恼\n#### 方法一：curl实现，post请求\n    1、复制浏览器的curl链接，\n    2、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n    3、删除掉原有的orgin和referer字段，\n    -H 请求头\n    --data-row：请求体\n    -x：请求协议\n#### 方法二：通过浏览器网址直接访问，get请求\n    1、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n    容易由于鉴权问题出现错误。\n#### 方法三：通过postman调用接口\n    1、配置后端的域名和接口地址环境\n    2、配置请求头\n    3、配置请求体","source":"_posts/检测后端接口常见方法.md","raw":"---\ntitle: 检测后端接口常见方法\ndate: 2022-05-22 22:36:45\ntags: 后端接口\ncategories: 前端\n---\n### 痛点，常常由于不知道后端接口是否可用而苦恼\n#### 方法一：curl实现，post请求\n    1、复制浏览器的curl链接，\n    2、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n    3、删除掉原有的orgin和referer字段，\n    -H 请求头\n    --data-row：请求体\n    -x：请求协议\n#### 方法二：通过浏览器网址直接访问，get请求\n    1、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n    容易由于鉴权问题出现错误。\n#### 方法三：通过postman调用接口\n    1、配置后端的域名和接口地址环境\n    2、配置请求头\n    3、配置请求体","slug":"检测后端接口常见方法","published":1,"updated":"2025-06-22T03:27:05.439Z","_id":"cmc703iqp0004wvtk27390ltq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"痛点，常常由于不知道后端接口是否可用而苦恼\"><a href=\"#痛点，常常由于不知道后端接口是否可用而苦恼\" class=\"headerlink\" title=\"痛点，常常由于不知道后端接口是否可用而苦恼\"></a>痛点，常常由于不知道后端接口是否可用而苦恼</h3><h4 id=\"方法一：curl实现，post请求\"><a href=\"#方法一：curl实现，post请求\" class=\"headerlink\" title=\"方法一：curl实现，post请求\"></a>方法一：curl实现，post请求</h4><pre><code>1、复制浏览器的curl链接，\n2、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n3、删除掉原有的orgin和referer字段，\n-H 请求头\n--data-row：请求体\n-x：请求协议\n</code></pre>\n<h4 id=\"方法二：通过浏览器网址直接访问，get请求\"><a href=\"#方法二：通过浏览器网址直接访问，get请求\" class=\"headerlink\" title=\"方法二：通过浏览器网址直接访问，get请求\"></a>方法二：通过浏览器网址直接访问，get请求</h4><pre><code>1、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n容易由于鉴权问题出现错误。\n</code></pre>\n<h4 id=\"方法三：通过postman调用接口\"><a href=\"#方法三：通过postman调用接口\" class=\"headerlink\" title=\"方法三：通过postman调用接口\"></a>方法三：通过postman调用接口</h4><pre><code>1、配置后端的域名和接口地址环境\n2、配置请求头\n3、配置请求体\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"痛点，常常由于不知道后端接口是否可用而苦恼\"><a href=\"#痛点，常常由于不知道后端接口是否可用而苦恼\" class=\"headerlink\" title=\"痛点，常常由于不知道后端接口是否可用而苦恼\"></a>痛点，常常由于不知道后端接口是否可用而苦恼</h3><h4 id=\"方法一：curl实现，post请求\"><a href=\"#方法一：curl实现，post请求\" class=\"headerlink\" title=\"方法一：curl实现，post请求\"></a>方法一：curl实现，post请求</h4><pre><code>1、复制浏览器的curl链接，\n2、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n3、删除掉原有的orgin和referer字段，\n-H 请求头\n--data-row：请求体\n-x：请求协议\n</code></pre>\n<h4 id=\"方法二：通过浏览器网址直接访问，get请求\"><a href=\"#方法二：通过浏览器网址直接访问，get请求\" class=\"headerlink\" title=\"方法二：通过浏览器网址直接访问，get请求\"></a>方法二：通过浏览器网址直接访问，get请求</h4><pre><code>1、用后端服务器地址和接口地址拼接替换掉curl中的请求地址\n容易由于鉴权问题出现错误。\n</code></pre>\n<h4 id=\"方法三：通过postman调用接口\"><a href=\"#方法三：通过postman调用接口\" class=\"headerlink\" title=\"方法三：通过postman调用接口\"></a>方法三：通过postman调用接口</h4><pre><code>1、配置后端的域名和接口地址环境\n2、配置请求头\n3、配置请求体\n</code></pre>\n"},{"title":"react前端下载后端返回的文件方法（url、二进制流）","date":"2022-05-22T14:41:02.000Z","comments":1,"_content":"### 前端下载文件有两种方式：\n1、通过后端返回的url，前端通过window.open(url);\n2、后端返回的是二进制流，通过a标签实现下载。\n##### 方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\n##### 方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\n```\naxios({\n      method: 'post',\n      url: '/api/trust/auditDownload', //此处放hobber的内部的url\n      data: params,\n      responseType: 'arraybuffer', // 需要制定返回的类型，否则下载的文件会乱码\n    }).then(res => {\n      // 假设 data 是返回来的二进制数据\n      const data = res.data;\n      const url = window.URL.createObjectURL( // type指定下载的文件的格式\n        new Blob([data], {\n          type:\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        }),\n      );\n      const link = document.createElement('a');\n      link.style.display = 'none';\n      link.href = url;\n      link.setAttribute('download', 'excel.xlsx'); // 设置下载的文件名\n      document.body.appendChild(link); \n      link.click(); // 触发a标签\n      document.body.removeChild(link); // 删除标签\n    });\n```\n##### 方法三、将二进制数据封装为文件读取FileReader对象\n```\n// utils.js\nexport const download = (res) => {\n  // 创建文件对象\n  let reader = new FileReader()\n  // 监听读取完毕\n  reader.onloadend = function () {\n    // 返回base64位的文件内容\n    let url = reader.result\n    // 下载\n    window.location.href = url\n  }\n  // 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。\n  reader.readAsDataURL(res)\n}\n```\n注意： 使用 FileReader对象封装二进制流之后没办法设置下载的文件名，默认文件名为下载，文件格式根据读取的是请求返回的content-type。\n\n##### 方法四、使用插件file-saver\n下载插件\n```\n npm install --save file-saver\n```\n引入插件\n```\n import { saveAs } from 'file-saver'\n```\n封装下载方法，使用插件\n```\n export const downloadFile = (res, type, filename) => {\n   // 将二进制数据封装成blob对象\n    const blob = new Blob([res], {\n     type: type\n   })\n   /**\n     这里也可以使用File对象封装二进制数据\n     const file = new File([res], filename, {\n       type: type\n     });\n   */\n   // 调用插件方法\n   saveAs(blob,filename)\n }\n```\n[插件源码](https://github.com/eligrey/FileSaver.js)\n##### 方法五、使用插件downloadjs\n下载插件\n```\n npm install --save downloadjs\n```\n引入插件\n```\n const download = require('downloadjs')\n```\n因为downloadjs源码中没有通过export导出download方法，而是通过return的方式返回download方法，因为需要使用require来引入文件。\n\n封装下载方法，使用插件\n```\n  export const downloadFile = (res, type, filename) => {\n    // 将二进制流转成blob对象\n    const blob = new Blob([res], {\n      type: type\n    })\n    // 调用插件方法\n    download(blob, filename, type);\n  }\n\n```\n[插件源码](https://github.com/rndme/download)\n##### 二、发送请求，获取二进制流数据\n```\n// index.vue\n<template>\n  <div>\n    <button @click='handleDownload'>下载</button>\n  </div>\n</template>\n<script>\n// 引入下载方法\nimport {download} from 'utils'\nexport default{\n  methods: {\n    async downloadFile () {\n      let res = await axios.get(\n        url: 'xxxx/xxxx',\n        method: 'GET',\n        // 设置返回数据类型，这里一定要设置，否则下载下来的文件会是空白,也可以是`arraybuffer`\n        responseType: 'blob',\n        params: {\n          id: 'xxxxxx'\n        }\n      )\n      // 获取在response headers中返回的下载文件类型\n      let type = JSON.parse(res.headers)['content-type']\n      \n      /*获取在response headers中返回的下载文件名\n        因为返回文件名是通过encodeURIComponent()函数进行了编码，因此需要通过decodeURIComponent()函数解码\n      */\n      let fileName = decodeURIComponent(JSON.parse(res.headers)['file-name'])\n      // 调用封装好的下载函数\n      download(res, type, fileName)\n    },\n    // 点击下载按钮下载\n    handleDownload() {\n      this.downloadFile()\n    }\n  }\n}\n</script>\n```\n##### 通过数据源拼接生产excel文件\n```\nconst outputExcel = () => {\n        let resultContent = 'A, B, C, D\\n'\n        let transferContent = resultContent => {\n            //根据数据 利用a标签模仿下载生成本地文件\n            let date = moment(new Date()).format('YYYY-MM-DD')\n            const blob = new Blob(['\\ufeff', resultContent], {\n                type: 'text/csv', // application/x-xls text/csv\n            })\n            const objectURL = window.URL.createObjectURL(blob)\n            const download = document.createElement('a')\n            download.href = objectURL\n            download.download = `${date}_${'文件名'}.${'csv'}`\n            download.click()\n            message.success('文件已下载')\n        }\n        let generateTxt = message => {\n            var element = document.createElement('a')\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(message))\n            element.setAttribute('download', '文件名' + new Date().getTime())\n            element.style.display = 'none'\n            document.body.appendChild(element)\n            element.click()\n            document.body.removeChild(element)\n        }\n        let current = 1,\n            pageSize = 8000\n\n        Modal.confirm({\n            title: '提示',\n            content: '确认导出全部信息吗？',\n            okText: '确认',\n            cancelText: '取消',\n            onOk: () => {\n                // 一次访问8000条数据的方案\n                refetch({\n                    filter: {},\n                    pager: { sort: '', current, pageSize },\n                    roleId,\n                }).then(values => {\n                    console.log('values', values)\n                    const total = values.data.allRoleUsers.total\n                    const nodes = values.data.allRoleUsers.nodes\n                    if (total > pageSize) {\n                        message.warning('用户数量太多')\n                    } else {\n                        for (let node of nodes) {\n                            let expireDate = moment(node['expireDate']).format('YYYY-MM-DD')\n                            if (expireDate === '9999-12-31') {\n                                expireDate = '永久有效'\n                            }\n                            resultContent +=\n                                node['A'] +\n                                ',' +\n                                node['B']['C'] +\n                                ',' +\n                                expireDate +\n                                ',' +\n                                moment(node['D']).format('YYYY-MM-DD') +\n                                '\\n'\n                        }\n                        // transferContent(resultContent)\n                        generateTxt(resultContent)\n                    }\n                })\n                // 轮询接口的方案\n                // const timer = setInterval(() => {\n                //     // console.log('current', current, Math.ceil(total / pageSize) + 1)\n                //     if (current < Math.ceil(total / pageSize) + 1) {\n                //         fetchMore({\n                //             variables: {\n                //                 filter: {},\n                //                 pager: { sort: '', current, pageSize },\n                //                 roleId,\n                //             },\n                //             updateQuery: (previousResult, { fetchMoreResult }) => {\n                //                 // console.log('previousResult', previousResult, fetchMoreResult)\n                //                 const nodes = fetchMoreResult?.allRoleUsers?.nodes\n                //                 for (let node of nodes) {\n                //                     resultContent +=\n                //                         node['A'] +\n                //                         ',' +\n                //                         node['B']['C'] +\n                //                         ',' +\n                //                         moment(node['D']).format('YYYY-MM-DD') +\n                //                         '\\n'\n                //                 }\n                //             },\n                //         })\n                //         current++\n                //     } else {\n                //         // 校验下载量是否与total值一致，一致则下载，反之则给出提示\n                //         const fileDateLines = resultContent.split('\\n').length - 1\n                //         if (fileDateLines === total + 1) {\n                //             transferContent(resultContent)\n                //         } else {\n                //             message.warning('数据量较大，导出数据出错，请联系管理员')\n                //         }\n                //         clearInterval(timer)\n                //     }\n                // }, 500)\n            },\n        })\n    }\n```","source":"_posts/react前端下载后端返回的文件方法（url、二进制流）.md","raw":"---\ntitle: react前端下载后端返回的文件方法（url、二进制流）\ndate: 2022-05-22 22:41:02\ntags: 前端调接口下载\ncategories: 前端\ncomments: true\n---\n### 前端下载文件有两种方式：\n1、通过后端返回的url，前端通过window.open(url);\n2、后端返回的是二进制流，通过a标签实现下载。\n##### 方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\n##### 方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\n```\naxios({\n      method: 'post',\n      url: '/api/trust/auditDownload', //此处放hobber的内部的url\n      data: params,\n      responseType: 'arraybuffer', // 需要制定返回的类型，否则下载的文件会乱码\n    }).then(res => {\n      // 假设 data 是返回来的二进制数据\n      const data = res.data;\n      const url = window.URL.createObjectURL( // type指定下载的文件的格式\n        new Blob([data], {\n          type:\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        }),\n      );\n      const link = document.createElement('a');\n      link.style.display = 'none';\n      link.href = url;\n      link.setAttribute('download', 'excel.xlsx'); // 设置下载的文件名\n      document.body.appendChild(link); \n      link.click(); // 触发a标签\n      document.body.removeChild(link); // 删除标签\n    });\n```\n##### 方法三、将二进制数据封装为文件读取FileReader对象\n```\n// utils.js\nexport const download = (res) => {\n  // 创建文件对象\n  let reader = new FileReader()\n  // 监听读取完毕\n  reader.onloadend = function () {\n    // 返回base64位的文件内容\n    let url = reader.result\n    // 下载\n    window.location.href = url\n  }\n  // 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。\n  reader.readAsDataURL(res)\n}\n```\n注意： 使用 FileReader对象封装二进制流之后没办法设置下载的文件名，默认文件名为下载，文件格式根据读取的是请求返回的content-type。\n\n##### 方法四、使用插件file-saver\n下载插件\n```\n npm install --save file-saver\n```\n引入插件\n```\n import { saveAs } from 'file-saver'\n```\n封装下载方法，使用插件\n```\n export const downloadFile = (res, type, filename) => {\n   // 将二进制数据封装成blob对象\n    const blob = new Blob([res], {\n     type: type\n   })\n   /**\n     这里也可以使用File对象封装二进制数据\n     const file = new File([res], filename, {\n       type: type\n     });\n   */\n   // 调用插件方法\n   saveAs(blob,filename)\n }\n```\n[插件源码](https://github.com/eligrey/FileSaver.js)\n##### 方法五、使用插件downloadjs\n下载插件\n```\n npm install --save downloadjs\n```\n引入插件\n```\n const download = require('downloadjs')\n```\n因为downloadjs源码中没有通过export导出download方法，而是通过return的方式返回download方法，因为需要使用require来引入文件。\n\n封装下载方法，使用插件\n```\n  export const downloadFile = (res, type, filename) => {\n    // 将二进制流转成blob对象\n    const blob = new Blob([res], {\n      type: type\n    })\n    // 调用插件方法\n    download(blob, filename, type);\n  }\n\n```\n[插件源码](https://github.com/rndme/download)\n##### 二、发送请求，获取二进制流数据\n```\n// index.vue\n<template>\n  <div>\n    <button @click='handleDownload'>下载</button>\n  </div>\n</template>\n<script>\n// 引入下载方法\nimport {download} from 'utils'\nexport default{\n  methods: {\n    async downloadFile () {\n      let res = await axios.get(\n        url: 'xxxx/xxxx',\n        method: 'GET',\n        // 设置返回数据类型，这里一定要设置，否则下载下来的文件会是空白,也可以是`arraybuffer`\n        responseType: 'blob',\n        params: {\n          id: 'xxxxxx'\n        }\n      )\n      // 获取在response headers中返回的下载文件类型\n      let type = JSON.parse(res.headers)['content-type']\n      \n      /*获取在response headers中返回的下载文件名\n        因为返回文件名是通过encodeURIComponent()函数进行了编码，因此需要通过decodeURIComponent()函数解码\n      */\n      let fileName = decodeURIComponent(JSON.parse(res.headers)['file-name'])\n      // 调用封装好的下载函数\n      download(res, type, fileName)\n    },\n    // 点击下载按钮下载\n    handleDownload() {\n      this.downloadFile()\n    }\n  }\n}\n</script>\n```\n##### 通过数据源拼接生产excel文件\n```\nconst outputExcel = () => {\n        let resultContent = 'A, B, C, D\\n'\n        let transferContent = resultContent => {\n            //根据数据 利用a标签模仿下载生成本地文件\n            let date = moment(new Date()).format('YYYY-MM-DD')\n            const blob = new Blob(['\\ufeff', resultContent], {\n                type: 'text/csv', // application/x-xls text/csv\n            })\n            const objectURL = window.URL.createObjectURL(blob)\n            const download = document.createElement('a')\n            download.href = objectURL\n            download.download = `${date}_${'文件名'}.${'csv'}`\n            download.click()\n            message.success('文件已下载')\n        }\n        let generateTxt = message => {\n            var element = document.createElement('a')\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(message))\n            element.setAttribute('download', '文件名' + new Date().getTime())\n            element.style.display = 'none'\n            document.body.appendChild(element)\n            element.click()\n            document.body.removeChild(element)\n        }\n        let current = 1,\n            pageSize = 8000\n\n        Modal.confirm({\n            title: '提示',\n            content: '确认导出全部信息吗？',\n            okText: '确认',\n            cancelText: '取消',\n            onOk: () => {\n                // 一次访问8000条数据的方案\n                refetch({\n                    filter: {},\n                    pager: { sort: '', current, pageSize },\n                    roleId,\n                }).then(values => {\n                    console.log('values', values)\n                    const total = values.data.allRoleUsers.total\n                    const nodes = values.data.allRoleUsers.nodes\n                    if (total > pageSize) {\n                        message.warning('用户数量太多')\n                    } else {\n                        for (let node of nodes) {\n                            let expireDate = moment(node['expireDate']).format('YYYY-MM-DD')\n                            if (expireDate === '9999-12-31') {\n                                expireDate = '永久有效'\n                            }\n                            resultContent +=\n                                node['A'] +\n                                ',' +\n                                node['B']['C'] +\n                                ',' +\n                                expireDate +\n                                ',' +\n                                moment(node['D']).format('YYYY-MM-DD') +\n                                '\\n'\n                        }\n                        // transferContent(resultContent)\n                        generateTxt(resultContent)\n                    }\n                })\n                // 轮询接口的方案\n                // const timer = setInterval(() => {\n                //     // console.log('current', current, Math.ceil(total / pageSize) + 1)\n                //     if (current < Math.ceil(total / pageSize) + 1) {\n                //         fetchMore({\n                //             variables: {\n                //                 filter: {},\n                //                 pager: { sort: '', current, pageSize },\n                //                 roleId,\n                //             },\n                //             updateQuery: (previousResult, { fetchMoreResult }) => {\n                //                 // console.log('previousResult', previousResult, fetchMoreResult)\n                //                 const nodes = fetchMoreResult?.allRoleUsers?.nodes\n                //                 for (let node of nodes) {\n                //                     resultContent +=\n                //                         node['A'] +\n                //                         ',' +\n                //                         node['B']['C'] +\n                //                         ',' +\n                //                         moment(node['D']).format('YYYY-MM-DD') +\n                //                         '\\n'\n                //                 }\n                //             },\n                //         })\n                //         current++\n                //     } else {\n                //         // 校验下载量是否与total值一致，一致则下载，反之则给出提示\n                //         const fileDateLines = resultContent.split('\\n').length - 1\n                //         if (fileDateLines === total + 1) {\n                //             transferContent(resultContent)\n                //         } else {\n                //             message.warning('数据量较大，导出数据出错，请联系管理员')\n                //         }\n                //         clearInterval(timer)\n                //     }\n                // }, 500)\n            },\n        })\n    }\n```","slug":"react前端下载后端返回的文件方法（url、二进制流）","published":1,"updated":"2025-06-22T03:28:31.930Z","_id":"cmc703iqq0005wvtkbaadd4si","layout":"post","photos":[],"link":"","content":"<h3 id=\"前端下载文件有两种方式：\"><a href=\"#前端下载文件有两种方式：\" class=\"headerlink\" title=\"前端下载文件有两种方式：\"></a>前端下载文件有两种方式：</h3><p>1、通过后端返回的url，前端通过window.open(url);<br>2、后端返回的是二进制流，通过a标签实现下载。</p>\n<h5 id=\"方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\"><a href=\"#方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\" class=\"headerlink\" title=\"方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\"></a>方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。</h5><h5 id=\"方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\"><a href=\"#方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\" class=\"headerlink\" title=\"方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\"></a>方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">      method: &#x27;post&#x27;,</span><br><span class=\"line\">      url: &#x27;/api/trust/auditDownload&#x27;, //此处放hobber的内部的url</span><br><span class=\"line\">      data: params,</span><br><span class=\"line\">      responseType: &#x27;arraybuffer&#x27;, // 需要制定返回的类型，否则下载的文件会乱码</span><br><span class=\"line\">    &#125;).then(res =&gt; &#123;</span><br><span class=\"line\">      // 假设 data 是返回来的二进制数据</span><br><span class=\"line\">      const data = res.data;</span><br><span class=\"line\">      const url = window.URL.createObjectURL( // type指定下载的文件的格式</span><br><span class=\"line\">        new Blob([data], &#123;</span><br><span class=\"line\">          type:</span><br><span class=\"line\">            &#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      );</span><br><span class=\"line\">      const link = document.createElement(&#x27;a&#x27;);</span><br><span class=\"line\">      link.style.display = &#x27;none&#x27;;</span><br><span class=\"line\">      link.href = url;</span><br><span class=\"line\">      link.setAttribute(&#x27;download&#x27;, &#x27;excel.xlsx&#x27;); // 设置下载的文件名</span><br><span class=\"line\">      document.body.appendChild(link); </span><br><span class=\"line\">      link.click(); // 触发a标签</span><br><span class=\"line\">      document.body.removeChild(link); // 删除标签</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法三、将二进制数据封装为文件读取FileReader对象\"><a href=\"#方法三、将二进制数据封装为文件读取FileReader对象\" class=\"headerlink\" title=\"方法三、将二进制数据封装为文件读取FileReader对象\"></a>方法三、将二进制数据封装为文件读取FileReader对象</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// utils.js</span><br><span class=\"line\">export const download = (res) =&gt; &#123;</span><br><span class=\"line\">  // 创建文件对象</span><br><span class=\"line\">  let reader = new FileReader()</span><br><span class=\"line\">  // 监听读取完毕</span><br><span class=\"line\">  reader.onloadend = function () &#123;</span><br><span class=\"line\">    // 返回base64位的文件内容</span><br><span class=\"line\">    let url = reader.result</span><br><span class=\"line\">    // 下载</span><br><span class=\"line\">    window.location.href = url</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。</span><br><span class=\"line\">  reader.readAsDataURL(res)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 FileReader对象封装二进制流之后没办法设置下载的文件名，默认文件名为下载，文件格式根据读取的是请求返回的content-type。</p>\n<h5 id=\"方法四、使用插件file-saver\"><a href=\"#方法四、使用插件file-saver\" class=\"headerlink\" title=\"方法四、使用插件file-saver\"></a>方法四、使用插件file-saver</h5><p>下载插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save file-saver</span><br></pre></td></tr></table></figure>\n<p>引入插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; saveAs &#125; from &#x27;file-saver&#x27;</span><br></pre></td></tr></table></figure>\n<p>封装下载方法，使用插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const downloadFile = (res, type, filename) =&gt; &#123;</span><br><span class=\"line\">  // 将二进制数据封装成blob对象</span><br><span class=\"line\">   const blob = new Blob([res], &#123;</span><br><span class=\"line\">    type: type</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  /**</span><br><span class=\"line\">    这里也可以使用File对象封装二进制数据</span><br><span class=\"line\">    const file = new File([res], filename, &#123;</span><br><span class=\"line\">      type: type</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  */</span><br><span class=\"line\">  // 调用插件方法</span><br><span class=\"line\">  saveAs(blob,filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\">插件源码</a></p>\n<h5 id=\"方法五、使用插件downloadjs\"><a href=\"#方法五、使用插件downloadjs\" class=\"headerlink\" title=\"方法五、使用插件downloadjs\"></a>方法五、使用插件downloadjs</h5><p>下载插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save downloadjs</span><br></pre></td></tr></table></figure>\n<p>引入插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const download = require(&#x27;downloadjs&#x27;)</span><br></pre></td></tr></table></figure>\n<p>因为downloadjs源码中没有通过export导出download方法，而是通过return的方式返回download方法，因为需要使用require来引入文件。</p>\n<p>封装下载方法，使用插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const downloadFile = (res, type, filename) =&gt; &#123;</span><br><span class=\"line\">  // 将二进制流转成blob对象</span><br><span class=\"line\">  const blob = new Blob([res], &#123;</span><br><span class=\"line\">    type: type</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 调用插件方法</span><br><span class=\"line\">  download(blob, filename, type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/rndme/download\">插件源码</a></p>\n<h5 id=\"二、发送请求，获取二进制流数据\"><a href=\"#二、发送请求，获取二进制流数据\" class=\"headerlink\" title=\"二、发送请求，获取二进制流数据\"></a>二、发送请求，获取二进制流数据</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&#x27;handleDownload&#x27;&gt;下载&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 引入下载方法</span><br><span class=\"line\">import &#123;download&#125; from &#x27;utils&#x27;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    async downloadFile () &#123;</span><br><span class=\"line\">      let res = await axios.get(</span><br><span class=\"line\">        url: &#x27;xxxx/xxxx&#x27;,</span><br><span class=\"line\">        method: &#x27;GET&#x27;,</span><br><span class=\"line\">        // 设置返回数据类型，这里一定要设置，否则下载下来的文件会是空白,也可以是`arraybuffer`</span><br><span class=\"line\">        responseType: &#x27;blob&#x27;,</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">          id: &#x27;xxxxxx&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      // 获取在response headers中返回的下载文件类型</span><br><span class=\"line\">      let type = JSON.parse(res.headers)[&#x27;content-type&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      /*获取在response headers中返回的下载文件名</span><br><span class=\"line\">        因为返回文件名是通过encodeURIComponent()函数进行了编码，因此需要通过decodeURIComponent()函数解码</span><br><span class=\"line\">      */</span><br><span class=\"line\">      let fileName = decodeURIComponent(JSON.parse(res.headers)[&#x27;file-name&#x27;])</span><br><span class=\"line\">      // 调用封装好的下载函数</span><br><span class=\"line\">      download(res, type, fileName)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 点击下载按钮下载</span><br><span class=\"line\">    handleDownload() &#123;</span><br><span class=\"line\">      this.downloadFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过数据源拼接生产excel文件\"><a href=\"#通过数据源拼接生产excel文件\" class=\"headerlink\" title=\"通过数据源拼接生产excel文件\"></a>通过数据源拼接生产excel文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const outputExcel = () =&gt; &#123;</span><br><span class=\"line\">        let resultContent = &#x27;A, B, C, D\\n&#x27;</span><br><span class=\"line\">        let transferContent = resultContent =&gt; &#123;</span><br><span class=\"line\">            //根据数据 利用a标签模仿下载生成本地文件</span><br><span class=\"line\">            let date = moment(new Date()).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">            const blob = new Blob([&#x27;\\ufeff&#x27;, resultContent], &#123;</span><br><span class=\"line\">                type: &#x27;text/csv&#x27;, // application/x-xls text/csv</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            const objectURL = window.URL.createObjectURL(blob)</span><br><span class=\"line\">            const download = document.createElement(&#x27;a&#x27;)</span><br><span class=\"line\">            download.href = objectURL</span><br><span class=\"line\">            download.download = `$&#123;date&#125;_$&#123;&#x27;文件名&#x27;&#125;.$&#123;&#x27;csv&#x27;&#125;`</span><br><span class=\"line\">            download.click()</span><br><span class=\"line\">            message.success(&#x27;文件已下载&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let generateTxt = message =&gt; &#123;</span><br><span class=\"line\">            var element = document.createElement(&#x27;a&#x27;)</span><br><span class=\"line\">            element.setAttribute(&#x27;href&#x27;, &#x27;data:text/plain;charset=utf-8,&#x27; + encodeURIComponent(message))</span><br><span class=\"line\">            element.setAttribute(&#x27;download&#x27;, &#x27;文件名&#x27; + new Date().getTime())</span><br><span class=\"line\">            element.style.display = &#x27;none&#x27;</span><br><span class=\"line\">            document.body.appendChild(element)</span><br><span class=\"line\">            element.click()</span><br><span class=\"line\">            document.body.removeChild(element)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let current = 1,</span><br><span class=\"line\">            pageSize = 8000</span><br><span class=\"line\"></span><br><span class=\"line\">        Modal.confirm(&#123;</span><br><span class=\"line\">            title: &#x27;提示&#x27;,</span><br><span class=\"line\">            content: &#x27;确认导出全部信息吗？&#x27;,</span><br><span class=\"line\">            okText: &#x27;确认&#x27;,</span><br><span class=\"line\">            cancelText: &#x27;取消&#x27;,</span><br><span class=\"line\">            onOk: () =&gt; &#123;</span><br><span class=\"line\">                // 一次访问8000条数据的方案</span><br><span class=\"line\">                refetch(&#123;</span><br><span class=\"line\">                    filter: &#123;&#125;,</span><br><span class=\"line\">                    pager: &#123; sort: &#x27;&#x27;, current, pageSize &#125;,</span><br><span class=\"line\">                    roleId,</span><br><span class=\"line\">                &#125;).then(values =&gt; &#123;</span><br><span class=\"line\">                    console.log(&#x27;values&#x27;, values)</span><br><span class=\"line\">                    const total = values.data.allRoleUsers.total</span><br><span class=\"line\">                    const nodes = values.data.allRoleUsers.nodes</span><br><span class=\"line\">                    if (total &gt; pageSize) &#123;</span><br><span class=\"line\">                        message.warning(&#x27;用户数量太多&#x27;)</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        for (let node of nodes) &#123;</span><br><span class=\"line\">                            let expireDate = moment(node[&#x27;expireDate&#x27;]).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">                            if (expireDate === &#x27;9999-12-31&#x27;) &#123;</span><br><span class=\"line\">                                expireDate = &#x27;永久有效&#x27;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            resultContent +=</span><br><span class=\"line\">                                node[&#x27;A&#x27;] +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                node[&#x27;B&#x27;][&#x27;C&#x27;] +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                expireDate +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                moment(node[&#x27;D&#x27;]).format(&#x27;YYYY-MM-DD&#x27;) +</span><br><span class=\"line\">                                &#x27;\\n&#x27;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        // transferContent(resultContent)</span><br><span class=\"line\">                        generateTxt(resultContent)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                // 轮询接口的方案</span><br><span class=\"line\">                // const timer = setInterval(() =&gt; &#123;</span><br><span class=\"line\">                //     // console.log(&#x27;current&#x27;, current, Math.ceil(total / pageSize) + 1)</span><br><span class=\"line\">                //     if (current &lt; Math.ceil(total / pageSize) + 1) &#123;</span><br><span class=\"line\">                //         fetchMore(&#123;</span><br><span class=\"line\">                //             variables: &#123;</span><br><span class=\"line\">                //                 filter: &#123;&#125;,</span><br><span class=\"line\">                //                 pager: &#123; sort: &#x27;&#x27;, current, pageSize &#125;,</span><br><span class=\"line\">                //                 roleId,</span><br><span class=\"line\">                //             &#125;,</span><br><span class=\"line\">                //             updateQuery: (previousResult, &#123; fetchMoreResult &#125;) =&gt; &#123;</span><br><span class=\"line\">                //                 // console.log(&#x27;previousResult&#x27;, previousResult, fetchMoreResult)</span><br><span class=\"line\">                //                 const nodes = fetchMoreResult?.allRoleUsers?.nodes</span><br><span class=\"line\">                //                 for (let node of nodes) &#123;</span><br><span class=\"line\">                //                     resultContent +=</span><br><span class=\"line\">                //                         node[&#x27;A&#x27;] +</span><br><span class=\"line\">                //                         &#x27;,&#x27; +</span><br><span class=\"line\">                //                         node[&#x27;B&#x27;][&#x27;C&#x27;] +</span><br><span class=\"line\">                //                         &#x27;,&#x27; +</span><br><span class=\"line\">                //                         moment(node[&#x27;D&#x27;]).format(&#x27;YYYY-MM-DD&#x27;) +</span><br><span class=\"line\">                //                         &#x27;\\n&#x27;</span><br><span class=\"line\">                //                 &#125;</span><br><span class=\"line\">                //             &#125;,</span><br><span class=\"line\">                //         &#125;)</span><br><span class=\"line\">                //         current++</span><br><span class=\"line\">                //     &#125; else &#123;</span><br><span class=\"line\">                //         // 校验下载量是否与total值一致，一致则下载，反之则给出提示</span><br><span class=\"line\">                //         const fileDateLines = resultContent.split(&#x27;\\n&#x27;).length - 1</span><br><span class=\"line\">                //         if (fileDateLines === total + 1) &#123;</span><br><span class=\"line\">                //             transferContent(resultContent)</span><br><span class=\"line\">                //         &#125; else &#123;</span><br><span class=\"line\">                //             message.warning(&#x27;数据量较大，导出数据出错，请联系管理员&#x27;)</span><br><span class=\"line\">                //         &#125;</span><br><span class=\"line\">                //         clearInterval(timer)</span><br><span class=\"line\">                //     &#125;</span><br><span class=\"line\">                // &#125;, 500)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前端下载文件有两种方式：\"><a href=\"#前端下载文件有两种方式：\" class=\"headerlink\" title=\"前端下载文件有两种方式：\"></a>前端下载文件有两种方式：</h3><p>1、通过后端返回的url，前端通过window.open(url);<br>2、后端返回的是二进制流，通过a标签实现下载。</p>\n<h5 id=\"方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\"><a href=\"#方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\" class=\"headerlink\" title=\"方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。\"></a>方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。</h5><h5 id=\"方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\"><a href=\"#方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\" class=\"headerlink\" title=\"方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。\"></a>方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">      method: &#x27;post&#x27;,</span><br><span class=\"line\">      url: &#x27;/api/trust/auditDownload&#x27;, //此处放hobber的内部的url</span><br><span class=\"line\">      data: params,</span><br><span class=\"line\">      responseType: &#x27;arraybuffer&#x27;, // 需要制定返回的类型，否则下载的文件会乱码</span><br><span class=\"line\">    &#125;).then(res =&gt; &#123;</span><br><span class=\"line\">      // 假设 data 是返回来的二进制数据</span><br><span class=\"line\">      const data = res.data;</span><br><span class=\"line\">      const url = window.URL.createObjectURL( // type指定下载的文件的格式</span><br><span class=\"line\">        new Blob([data], &#123;</span><br><span class=\"line\">          type:</span><br><span class=\"line\">            &#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      );</span><br><span class=\"line\">      const link = document.createElement(&#x27;a&#x27;);</span><br><span class=\"line\">      link.style.display = &#x27;none&#x27;;</span><br><span class=\"line\">      link.href = url;</span><br><span class=\"line\">      link.setAttribute(&#x27;download&#x27;, &#x27;excel.xlsx&#x27;); // 设置下载的文件名</span><br><span class=\"line\">      document.body.appendChild(link); </span><br><span class=\"line\">      link.click(); // 触发a标签</span><br><span class=\"line\">      document.body.removeChild(link); // 删除标签</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法三、将二进制数据封装为文件读取FileReader对象\"><a href=\"#方法三、将二进制数据封装为文件读取FileReader对象\" class=\"headerlink\" title=\"方法三、将二进制数据封装为文件读取FileReader对象\"></a>方法三、将二进制数据封装为文件读取FileReader对象</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// utils.js</span><br><span class=\"line\">export const download = (res) =&gt; &#123;</span><br><span class=\"line\">  // 创建文件对象</span><br><span class=\"line\">  let reader = new FileReader()</span><br><span class=\"line\">  // 监听读取完毕</span><br><span class=\"line\">  reader.onloadend = function () &#123;</span><br><span class=\"line\">    // 返回base64位的文件内容</span><br><span class=\"line\">    let url = reader.result</span><br><span class=\"line\">    // 下载</span><br><span class=\"line\">    window.location.href = url</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。</span><br><span class=\"line\">  reader.readAsDataURL(res)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 FileReader对象封装二进制流之后没办法设置下载的文件名，默认文件名为下载，文件格式根据读取的是请求返回的content-type。</p>\n<h5 id=\"方法四、使用插件file-saver\"><a href=\"#方法四、使用插件file-saver\" class=\"headerlink\" title=\"方法四、使用插件file-saver\"></a>方法四、使用插件file-saver</h5><p>下载插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save file-saver</span><br></pre></td></tr></table></figure>\n<p>引入插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; saveAs &#125; from &#x27;file-saver&#x27;</span><br></pre></td></tr></table></figure>\n<p>封装下载方法，使用插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const downloadFile = (res, type, filename) =&gt; &#123;</span><br><span class=\"line\">  // 将二进制数据封装成blob对象</span><br><span class=\"line\">   const blob = new Blob([res], &#123;</span><br><span class=\"line\">    type: type</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  /**</span><br><span class=\"line\">    这里也可以使用File对象封装二进制数据</span><br><span class=\"line\">    const file = new File([res], filename, &#123;</span><br><span class=\"line\">      type: type</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  */</span><br><span class=\"line\">  // 调用插件方法</span><br><span class=\"line\">  saveAs(blob,filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/eligrey/FileSaver.js\">插件源码</a></p>\n<h5 id=\"方法五、使用插件downloadjs\"><a href=\"#方法五、使用插件downloadjs\" class=\"headerlink\" title=\"方法五、使用插件downloadjs\"></a>方法五、使用插件downloadjs</h5><p>下载插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save downloadjs</span><br></pre></td></tr></table></figure>\n<p>引入插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const download = require(&#x27;downloadjs&#x27;)</span><br></pre></td></tr></table></figure>\n<p>因为downloadjs源码中没有通过export导出download方法，而是通过return的方式返回download方法，因为需要使用require来引入文件。</p>\n<p>封装下载方法，使用插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const downloadFile = (res, type, filename) =&gt; &#123;</span><br><span class=\"line\">  // 将二进制流转成blob对象</span><br><span class=\"line\">  const blob = new Blob([res], &#123;</span><br><span class=\"line\">    type: type</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 调用插件方法</span><br><span class=\"line\">  download(blob, filename, type);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/rndme/download\">插件源码</a></p>\n<h5 id=\"二、发送请求，获取二进制流数据\"><a href=\"#二、发送请求，获取二进制流数据\" class=\"headerlink\" title=\"二、发送请求，获取二进制流数据\"></a>二、发送请求，获取二进制流数据</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&#x27;handleDownload&#x27;&gt;下载&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 引入下载方法</span><br><span class=\"line\">import &#123;download&#125; from &#x27;utils&#x27;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    async downloadFile () &#123;</span><br><span class=\"line\">      let res = await axios.get(</span><br><span class=\"line\">        url: &#x27;xxxx/xxxx&#x27;,</span><br><span class=\"line\">        method: &#x27;GET&#x27;,</span><br><span class=\"line\">        // 设置返回数据类型，这里一定要设置，否则下载下来的文件会是空白,也可以是`arraybuffer`</span><br><span class=\"line\">        responseType: &#x27;blob&#x27;,</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">          id: &#x27;xxxxxx&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      // 获取在response headers中返回的下载文件类型</span><br><span class=\"line\">      let type = JSON.parse(res.headers)[&#x27;content-type&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      /*获取在response headers中返回的下载文件名</span><br><span class=\"line\">        因为返回文件名是通过encodeURIComponent()函数进行了编码，因此需要通过decodeURIComponent()函数解码</span><br><span class=\"line\">      */</span><br><span class=\"line\">      let fileName = decodeURIComponent(JSON.parse(res.headers)[&#x27;file-name&#x27;])</span><br><span class=\"line\">      // 调用封装好的下载函数</span><br><span class=\"line\">      download(res, type, fileName)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 点击下载按钮下载</span><br><span class=\"line\">    handleDownload() &#123;</span><br><span class=\"line\">      this.downloadFile()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过数据源拼接生产excel文件\"><a href=\"#通过数据源拼接生产excel文件\" class=\"headerlink\" title=\"通过数据源拼接生产excel文件\"></a>通过数据源拼接生产excel文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const outputExcel = () =&gt; &#123;</span><br><span class=\"line\">        let resultContent = &#x27;A, B, C, D\\n&#x27;</span><br><span class=\"line\">        let transferContent = resultContent =&gt; &#123;</span><br><span class=\"line\">            //根据数据 利用a标签模仿下载生成本地文件</span><br><span class=\"line\">            let date = moment(new Date()).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">            const blob = new Blob([&#x27;\\ufeff&#x27;, resultContent], &#123;</span><br><span class=\"line\">                type: &#x27;text/csv&#x27;, // application/x-xls text/csv</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            const objectURL = window.URL.createObjectURL(blob)</span><br><span class=\"line\">            const download = document.createElement(&#x27;a&#x27;)</span><br><span class=\"line\">            download.href = objectURL</span><br><span class=\"line\">            download.download = `$&#123;date&#125;_$&#123;&#x27;文件名&#x27;&#125;.$&#123;&#x27;csv&#x27;&#125;`</span><br><span class=\"line\">            download.click()</span><br><span class=\"line\">            message.success(&#x27;文件已下载&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let generateTxt = message =&gt; &#123;</span><br><span class=\"line\">            var element = document.createElement(&#x27;a&#x27;)</span><br><span class=\"line\">            element.setAttribute(&#x27;href&#x27;, &#x27;data:text/plain;charset=utf-8,&#x27; + encodeURIComponent(message))</span><br><span class=\"line\">            element.setAttribute(&#x27;download&#x27;, &#x27;文件名&#x27; + new Date().getTime())</span><br><span class=\"line\">            element.style.display = &#x27;none&#x27;</span><br><span class=\"line\">            document.body.appendChild(element)</span><br><span class=\"line\">            element.click()</span><br><span class=\"line\">            document.body.removeChild(element)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let current = 1,</span><br><span class=\"line\">            pageSize = 8000</span><br><span class=\"line\"></span><br><span class=\"line\">        Modal.confirm(&#123;</span><br><span class=\"line\">            title: &#x27;提示&#x27;,</span><br><span class=\"line\">            content: &#x27;确认导出全部信息吗？&#x27;,</span><br><span class=\"line\">            okText: &#x27;确认&#x27;,</span><br><span class=\"line\">            cancelText: &#x27;取消&#x27;,</span><br><span class=\"line\">            onOk: () =&gt; &#123;</span><br><span class=\"line\">                // 一次访问8000条数据的方案</span><br><span class=\"line\">                refetch(&#123;</span><br><span class=\"line\">                    filter: &#123;&#125;,</span><br><span class=\"line\">                    pager: &#123; sort: &#x27;&#x27;, current, pageSize &#125;,</span><br><span class=\"line\">                    roleId,</span><br><span class=\"line\">                &#125;).then(values =&gt; &#123;</span><br><span class=\"line\">                    console.log(&#x27;values&#x27;, values)</span><br><span class=\"line\">                    const total = values.data.allRoleUsers.total</span><br><span class=\"line\">                    const nodes = values.data.allRoleUsers.nodes</span><br><span class=\"line\">                    if (total &gt; pageSize) &#123;</span><br><span class=\"line\">                        message.warning(&#x27;用户数量太多&#x27;)</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        for (let node of nodes) &#123;</span><br><span class=\"line\">                            let expireDate = moment(node[&#x27;expireDate&#x27;]).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">                            if (expireDate === &#x27;9999-12-31&#x27;) &#123;</span><br><span class=\"line\">                                expireDate = &#x27;永久有效&#x27;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            resultContent +=</span><br><span class=\"line\">                                node[&#x27;A&#x27;] +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                node[&#x27;B&#x27;][&#x27;C&#x27;] +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                expireDate +</span><br><span class=\"line\">                                &#x27;,&#x27; +</span><br><span class=\"line\">                                moment(node[&#x27;D&#x27;]).format(&#x27;YYYY-MM-DD&#x27;) +</span><br><span class=\"line\">                                &#x27;\\n&#x27;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        // transferContent(resultContent)</span><br><span class=\"line\">                        generateTxt(resultContent)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                // 轮询接口的方案</span><br><span class=\"line\">                // const timer = setInterval(() =&gt; &#123;</span><br><span class=\"line\">                //     // console.log(&#x27;current&#x27;, current, Math.ceil(total / pageSize) + 1)</span><br><span class=\"line\">                //     if (current &lt; Math.ceil(total / pageSize) + 1) &#123;</span><br><span class=\"line\">                //         fetchMore(&#123;</span><br><span class=\"line\">                //             variables: &#123;</span><br><span class=\"line\">                //                 filter: &#123;&#125;,</span><br><span class=\"line\">                //                 pager: &#123; sort: &#x27;&#x27;, current, pageSize &#125;,</span><br><span class=\"line\">                //                 roleId,</span><br><span class=\"line\">                //             &#125;,</span><br><span class=\"line\">                //             updateQuery: (previousResult, &#123; fetchMoreResult &#125;) =&gt; &#123;</span><br><span class=\"line\">                //                 // console.log(&#x27;previousResult&#x27;, previousResult, fetchMoreResult)</span><br><span class=\"line\">                //                 const nodes = fetchMoreResult?.allRoleUsers?.nodes</span><br><span class=\"line\">                //                 for (let node of nodes) &#123;</span><br><span class=\"line\">                //                     resultContent +=</span><br><span class=\"line\">                //                         node[&#x27;A&#x27;] +</span><br><span class=\"line\">                //                         &#x27;,&#x27; +</span><br><span class=\"line\">                //                         node[&#x27;B&#x27;][&#x27;C&#x27;] +</span><br><span class=\"line\">                //                         &#x27;,&#x27; +</span><br><span class=\"line\">                //                         moment(node[&#x27;D&#x27;]).format(&#x27;YYYY-MM-DD&#x27;) +</span><br><span class=\"line\">                //                         &#x27;\\n&#x27;</span><br><span class=\"line\">                //                 &#125;</span><br><span class=\"line\">                //             &#125;,</span><br><span class=\"line\">                //         &#125;)</span><br><span class=\"line\">                //         current++</span><br><span class=\"line\">                //     &#125; else &#123;</span><br><span class=\"line\">                //         // 校验下载量是否与total值一致，一致则下载，反之则给出提示</span><br><span class=\"line\">                //         const fileDateLines = resultContent.split(&#x27;\\n&#x27;).length - 1</span><br><span class=\"line\">                //         if (fileDateLines === total + 1) &#123;</span><br><span class=\"line\">                //             transferContent(resultContent)</span><br><span class=\"line\">                //         &#125; else &#123;</span><br><span class=\"line\">                //             message.warning(&#x27;数据量较大，导出数据出错，请联系管理员&#x27;)</span><br><span class=\"line\">                //         &#125;</span><br><span class=\"line\">                //         clearInterval(timer)</span><br><span class=\"line\">                //     &#125;</span><br><span class=\"line\">                // &#125;, 500)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"每天一个新问题（永远保持怀疑）","date":"2022-05-22T14:49:29.000Z","_content":"1、\\<\\> 、\\<React.Fragment\\>与\\<div\\>。前两者作为代码块插入的form表单中，form表单无法获取其值，后者可以获得。\n    \n######     答案：\n```jsx\n// form表单获取值是通过内部最近的控件的onchange（）事件和value值获取，<> 和 <React.Fragment>中是没有onchange（）和value事件的，所以form.item无法获取内部控件的值，（对children进行最近的控件的onchange的事件监听）。而div控件是有onchange事件的。（onchage事件是冒泡）\n    <Form.Item name=\"opterator\" label=\"操作人：\">\n                <div  onChange={e=>{\n                  console.log(\"gerd => \" ,e)\n                }}>\n                <>\n                <div onChange={e=>{\n                  console.log(e);\n                  e.stopPropagation(); //阻止冒泡后，获取不到值\n                }}>\n                  <input\n                    // style={{ width: '75%' }}\n                    placeholder=\"请输入操作人\"\n                  />\n                </div>\n              </>\n             </div>\n        </Form.Item>\n```\n    \n \n2、antd的select的默认属性值在form表单中不起作用，获取的是undefined\n    \n  ######     答案\n  >form表单中控件的值默认初始化只能通过form的initialValues和setFieldsValue进行初始化，form.item内部控件中的defaultvalue值只能展示，但是当获取时，通过form的value为undefined。\n>\n\n3、this.setstate({data}),为了代码的简略性，常常使用es6的特性。易出现state值发生了变化，但是render函数并未触发。\n    \n######     解答\n    \n>react的this.setstate方法在对象引用是需要注意，当对象中属性发生变化时，对象引用即发生变化，当数组对象中成员添加时，引用未发生变化。建议通过this.setstate({data: [...data]})的方式，将数组拆分赋值，实现引用的变化来触发render函数。\n>\n\n4、 当我们开发时，经常遇到antd中日期选择器的时间处理。\n    \n######     解答\n```js\n// 通过monent函数转化，当然，monent需要引入函数库；import monent from 'monent';\nstartDate = moment(value.findDate[0].format('YYYY-MM-DD HH:mm:ss'));// 转化为开始日期\nendDate = moment(value.findDate[1].format('YYYY-MM-DD HH:mm:ss'));// 转化为结束日期\n// 此处的x为datepicker的value值哟。\n日期=》时间戳： x.unix()\n时间戳=》日期：moment( new Date(x * 1000 ))\n```\n    \n5、当需要实现带状态跳转页面时，实现进出返回页面的页面信息一致。\n    \n###### 郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\n>1）、redux\n>2）、将状态放在上级组件中存储 \n>3）、放在sessionstorage或localstorage中存储\n>\n\n优缺点：redux可避免状态外漏\n    \n\n| 序号 | 方法 |优点  | 缺点 |\n| --- | --- | --- | --- |\n|1  | redux | 避免状态信息的泄漏 | 每次不可以刷新页面进入，需通过路由跳转才能获取props中redux的值 |\n| 2 |将状态放在上级组件中存储  |  通过组件的props传值，获取值时机可靠|  组件间耦合关系太深，开发繁琐 |\n| 3 |放在sessionstorage或localstorage中存储  |  存储值方便|当页面跳转时，无法有效的删除storage和在session中泄露状态信息  |\n|4|放在url中存储 |方便页面跳转获取参数  |  当状态信息过多时，超出url长度。对于泄漏参数信息可以通过加密实现，最简单的window.btoa()和window.atob();window.atob()进行加密|\n\n```\n6、<a href=\"#\"></a>标签点击下，路由上会添加#，当有涉及到路由情况时要注意，比如umi的propmt控件，检测路由变化，当路由发生变化时才进入肉流程。反之不会。\n    <Prompt\n      when={this.state.submit} // sunmit为提交按钮状态 默认为false\n      message={location => {\n        if (this.state.submit) {\n          Modal.confirm({\n            icon: <ExclamationCircleOutlined />,\n            content: '暂未提交您所做的更改，是否提交',\n            okText: '继续加载',\n            cancelText: '取消',\n            onOk: () => {\n              this.setState({ submit: false }, () => {\n                this.props.history.push(`${location.pathname}`);\n              });\n            },\n            onCancel: () => {},\n          });\n          return false; // 返回false时，阻塞路由跳转\n        }\n        return true; // 返回true时，路由跳转\n      }}\n```\n7、永远不要修改this.state里的对象，要用lodash的cloneDeep实现对象隔离。chrome也是人写的，不可避免的存在错误，不要相信没问题的工具。能相信的只有自己。！！！！\n \n8、父组件向子组件传值，子组件的个别属性接收的是第一次组件的值。状态未刷新\n######     解答\n        react的diff是根据组件的key值和value进行对比是否进行更换的，没有key值易出现传a但是接受到的还是b，状态没有刷新的情况。\n 9、定位问题，需要根据现有的情况进行定位。比如：当页面上路由展示不对时，应该尝试当url变化时，内容是否展示。是则是展示控件问题，通过查看版本锁，打包工具的不同对应的版本锁也不同。\n 10、验签问题，验签实质时获取申请的资源通过计算出想要的字段放在头文件中，每次调用接口都带上。\n######         坑\n       当设计时间戳问题时，一般设置为前后三十秒。且为本机时间，这时候电脑时间要与网络同步，不然会验签不通过。\n11、antd的版本包问题：antdesign/proprolayout依赖安装ant时，它默认安装最新的antd版本包。但是antd的版本包易出错，导致网站样式错误。\n######         解答\n        通过指定安装antd版本，寻找无问题的antd版本可以安装无错误时间的antd版本，或者，依赖安装的prolayout中指定的antd版本。（到npm包仓库中找对应的版本包里的依赖项的版本）","source":"_posts/每天一个新问题（永远保持怀疑）.md","raw":"---\ntitle: 每天一个新问题（永远保持怀疑）\ndate: 2022-05-22 22:49:29\ntag: 持续更新（ing）\ncategories: 前端\n---\n1、\\<\\> 、\\<React.Fragment\\>与\\<div\\>。前两者作为代码块插入的form表单中，form表单无法获取其值，后者可以获得。\n    \n######     答案：\n```jsx\n// form表单获取值是通过内部最近的控件的onchange（）事件和value值获取，<> 和 <React.Fragment>中是没有onchange（）和value事件的，所以form.item无法获取内部控件的值，（对children进行最近的控件的onchange的事件监听）。而div控件是有onchange事件的。（onchage事件是冒泡）\n    <Form.Item name=\"opterator\" label=\"操作人：\">\n                <div  onChange={e=>{\n                  console.log(\"gerd => \" ,e)\n                }}>\n                <>\n                <div onChange={e=>{\n                  console.log(e);\n                  e.stopPropagation(); //阻止冒泡后，获取不到值\n                }}>\n                  <input\n                    // style={{ width: '75%' }}\n                    placeholder=\"请输入操作人\"\n                  />\n                </div>\n              </>\n             </div>\n        </Form.Item>\n```\n    \n \n2、antd的select的默认属性值在form表单中不起作用，获取的是undefined\n    \n  ######     答案\n  >form表单中控件的值默认初始化只能通过form的initialValues和setFieldsValue进行初始化，form.item内部控件中的defaultvalue值只能展示，但是当获取时，通过form的value为undefined。\n>\n\n3、this.setstate({data}),为了代码的简略性，常常使用es6的特性。易出现state值发生了变化，但是render函数并未触发。\n    \n######     解答\n    \n>react的this.setstate方法在对象引用是需要注意，当对象中属性发生变化时，对象引用即发生变化，当数组对象中成员添加时，引用未发生变化。建议通过this.setstate({data: [...data]})的方式，将数组拆分赋值，实现引用的变化来触发render函数。\n>\n\n4、 当我们开发时，经常遇到antd中日期选择器的时间处理。\n    \n######     解答\n```js\n// 通过monent函数转化，当然，monent需要引入函数库；import monent from 'monent';\nstartDate = moment(value.findDate[0].format('YYYY-MM-DD HH:mm:ss'));// 转化为开始日期\nendDate = moment(value.findDate[1].format('YYYY-MM-DD HH:mm:ss'));// 转化为结束日期\n// 此处的x为datepicker的value值哟。\n日期=》时间戳： x.unix()\n时间戳=》日期：moment( new Date(x * 1000 ))\n```\n    \n5、当需要实现带状态跳转页面时，实现进出返回页面的页面信息一致。\n    \n###### 郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\n>1）、redux\n>2）、将状态放在上级组件中存储 \n>3）、放在sessionstorage或localstorage中存储\n>\n\n优缺点：redux可避免状态外漏\n    \n\n| 序号 | 方法 |优点  | 缺点 |\n| --- | --- | --- | --- |\n|1  | redux | 避免状态信息的泄漏 | 每次不可以刷新页面进入，需通过路由跳转才能获取props中redux的值 |\n| 2 |将状态放在上级组件中存储  |  通过组件的props传值，获取值时机可靠|  组件间耦合关系太深，开发繁琐 |\n| 3 |放在sessionstorage或localstorage中存储  |  存储值方便|当页面跳转时，无法有效的删除storage和在session中泄露状态信息  |\n|4|放在url中存储 |方便页面跳转获取参数  |  当状态信息过多时，超出url长度。对于泄漏参数信息可以通过加密实现，最简单的window.btoa()和window.atob();window.atob()进行加密|\n\n```\n6、<a href=\"#\"></a>标签点击下，路由上会添加#，当有涉及到路由情况时要注意，比如umi的propmt控件，检测路由变化，当路由发生变化时才进入肉流程。反之不会。\n    <Prompt\n      when={this.state.submit} // sunmit为提交按钮状态 默认为false\n      message={location => {\n        if (this.state.submit) {\n          Modal.confirm({\n            icon: <ExclamationCircleOutlined />,\n            content: '暂未提交您所做的更改，是否提交',\n            okText: '继续加载',\n            cancelText: '取消',\n            onOk: () => {\n              this.setState({ submit: false }, () => {\n                this.props.history.push(`${location.pathname}`);\n              });\n            },\n            onCancel: () => {},\n          });\n          return false; // 返回false时，阻塞路由跳转\n        }\n        return true; // 返回true时，路由跳转\n      }}\n```\n7、永远不要修改this.state里的对象，要用lodash的cloneDeep实现对象隔离。chrome也是人写的，不可避免的存在错误，不要相信没问题的工具。能相信的只有自己。！！！！\n \n8、父组件向子组件传值，子组件的个别属性接收的是第一次组件的值。状态未刷新\n######     解答\n        react的diff是根据组件的key值和value进行对比是否进行更换的，没有key值易出现传a但是接受到的还是b，状态没有刷新的情况。\n 9、定位问题，需要根据现有的情况进行定位。比如：当页面上路由展示不对时，应该尝试当url变化时，内容是否展示。是则是展示控件问题，通过查看版本锁，打包工具的不同对应的版本锁也不同。\n 10、验签问题，验签实质时获取申请的资源通过计算出想要的字段放在头文件中，每次调用接口都带上。\n######         坑\n       当设计时间戳问题时，一般设置为前后三十秒。且为本机时间，这时候电脑时间要与网络同步，不然会验签不通过。\n11、antd的版本包问题：antdesign/proprolayout依赖安装ant时，它默认安装最新的antd版本包。但是antd的版本包易出错，导致网站样式错误。\n######         解答\n        通过指定安装antd版本，寻找无问题的antd版本可以安装无错误时间的antd版本，或者，依赖安装的prolayout中指定的antd版本。（到npm包仓库中找对应的版本包里的依赖项的版本）","slug":"每天一个新问题（永远保持怀疑）","published":1,"updated":"2025-06-22T03:27:21.479Z","_id":"cmc703iqr0006wvtk5uh4334b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、&lt;&gt; 、&lt;React.Fragment&gt;与&lt;div&gt;。前两者作为代码块插入的form表单中，form表单无法获取其值，后者可以获得。</p>\n<h6 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h6><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// form表单获取值是通过内部最近的控件的onchange（）事件和value值获取，&lt;&gt; 和 &lt;React.Fragment&gt;中是没有onchange（）和value事件的，所以form.item无法获取内部控件的值，（对children进行最近的控件的onchange的事件监听）。而div控件是有onchange事件的。（onchage事件是冒泡）</span></span><br><span class=\"line\">    &lt;<span class=\"title class_\">Form</span>.<span class=\"property\">Item</span> name=<span class=\"string\">&quot;opterator&quot;</span> label=<span class=\"string\">&quot;操作人：&quot;</span>&gt;</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  console.log(&quot;gerd =&gt; &quot; ,e)</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  console.log(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">                  e.stopPropagation(); //阻止冒泡后，获取不到值</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    // <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">75</span>%&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入操作人&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">             &lt;/div&gt;</span><br><span class=\"line\">        &lt;/<span class=\"title class_\">Form</span>.<span class=\"property\">Item</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>2、antd的select的默认属性值在form表单中不起作用，获取的是undefined</p>\n<h6 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h6><blockquote>\n<p>form表单中控件的值默认初始化只能通过form的initialValues和setFieldsValue进行初始化，form.item内部控件中的defaultvalue值只能展示，但是当获取时，通过form的value为undefined。</p>\n</blockquote>\n<p>3、this.setstate({data}),为了代码的简略性，常常使用es6的特性。易出现state值发生了变化，但是render函数并未触发。</p>\n<h6 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h6><blockquote>\n<p>react的this.setstate方法在对象引用是需要注意，当对象中属性发生变化时，对象引用即发生变化，当数组对象中成员添加时，引用未发生变化。建议通过this.setstate({data: […data]})的方式，将数组拆分赋值，实现引用的变化来触发render函数。</p>\n</blockquote>\n<p>4、 当我们开发时，经常遇到antd中日期选择器的时间处理。</p>\n<h6 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过monent函数转化，当然，monent需要引入函数库；import monent from &#x27;monent&#x27;;</span></span><br><span class=\"line\">startDate = <span class=\"title function_\">moment</span>(value.<span class=\"property\">findDate</span>[<span class=\"number\">0</span>].<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class=\"comment\">// 转化为开始日期</span></span><br><span class=\"line\">endDate = <span class=\"title function_\">moment</span>(value.<span class=\"property\">findDate</span>[<span class=\"number\">1</span>].<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class=\"comment\">// 转化为结束日期</span></span><br><span class=\"line\"><span class=\"comment\">// 此处的x为datepicker的value值哟。</span></span><br><span class=\"line\">日期=》时间戳： x.<span class=\"title function_\">unix</span>()</span><br><span class=\"line\">时间戳=》日期：<span class=\"title function_\">moment</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(x * <span class=\"number\">1000</span> ))</span><br></pre></td></tr></table></figure>\n<p>5、当需要实现带状态跳转页面时，实现进出返回页面的页面信息一致。</p>\n<h6 id=\"郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\"><a href=\"#郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\" class=\"headerlink\" title=\"郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\"></a>郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。</h6><blockquote>\n<p>1）、redux<br>2）、将状态放在上级组件中存储<br>3）、放在sessionstorage或localstorage中存储</p>\n</blockquote>\n<p>优缺点：redux可避免状态外漏</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>redux</td>\n<td>避免状态信息的泄漏</td>\n<td>每次不可以刷新页面进入，需通过路由跳转才能获取props中redux的值</td>\n</tr>\n<tr>\n<td>2</td>\n<td>将状态放在上级组件中存储</td>\n<td>通过组件的props传值，获取值时机可靠</td>\n<td>组件间耦合关系太深，开发繁琐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>放在sessionstorage或localstorage中存储</td>\n<td>存储值方便</td>\n<td>当页面跳转时，无法有效的删除storage和在session中泄露状态信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>放在url中存储</td>\n<td>方便页面跳转获取参数</td>\n<td>当状态信息过多时，超出url长度。对于泄漏参数信息可以通过加密实现，最简单的window.btoa()和window.atob();window.atob()进行加密</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6、&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;标签点击下，路由上会添加#，当有涉及到路由情况时要注意，比如umi的propmt控件，检测路由变化，当路由发生变化时才进入肉流程。反之不会。</span><br><span class=\"line\">    &lt;Prompt</span><br><span class=\"line\">      when=&#123;this.state.submit&#125; // sunmit为提交按钮状态 默认为false</span><br><span class=\"line\">      message=&#123;location =&gt; &#123;</span><br><span class=\"line\">        if (this.state.submit) &#123;</span><br><span class=\"line\">          Modal.confirm(&#123;</span><br><span class=\"line\">            icon: &lt;ExclamationCircleOutlined /&gt;,</span><br><span class=\"line\">            content: &#x27;暂未提交您所做的更改，是否提交&#x27;,</span><br><span class=\"line\">            okText: &#x27;继续加载&#x27;,</span><br><span class=\"line\">            cancelText: &#x27;取消&#x27;,</span><br><span class=\"line\">            onOk: () =&gt; &#123;</span><br><span class=\"line\">              this.setState(&#123; submit: false &#125;, () =&gt; &#123;</span><br><span class=\"line\">                this.props.history.push(`$&#123;location.pathname&#125;`);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            onCancel: () =&gt; &#123;&#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          return false; // 返回false时，阻塞路由跳转</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true; // 返回true时，路由跳转</span><br><span class=\"line\">      &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>7、永远不要修改this.state里的对象，要用lodash的cloneDeep实现对象隔离。chrome也是人写的，不可避免的存在错误，不要相信没问题的工具。能相信的只有自己。！！！！</p>\n<p>8、父组件向子组件传值，子组件的个别属性接收的是第一次组件的值。状态未刷新</p>\n<h6 id=\"解答-2\"><a href=\"#解答-2\" class=\"headerlink\" title=\"解答\"></a>解答</h6><pre><code>    react的diff是根据组件的key值和value进行对比是否进行更换的，没有key值易出现传a但是接受到的还是b，状态没有刷新的情况。\n</code></pre>\n<p> 9、定位问题，需要根据现有的情况进行定位。比如：当页面上路由展示不对时，应该尝试当url变化时，内容是否展示。是则是展示控件问题，通过查看版本锁，打包工具的不同对应的版本锁也不同。<br> 10、验签问题，验签实质时获取申请的资源通过计算出想要的字段放在头文件中，每次调用接口都带上。</p>\n<h6 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h6><pre><code>   当设计时间戳问题时，一般设置为前后三十秒。且为本机时间，这时候电脑时间要与网络同步，不然会验签不通过。\n</code></pre>\n<p>11、antd的版本包问题：antdesign/proprolayout依赖安装ant时，它默认安装最新的antd版本包。但是antd的版本包易出错，导致网站样式错误。</p>\n<h6 id=\"解答-3\"><a href=\"#解答-3\" class=\"headerlink\" title=\"解答\"></a>解答</h6><pre><code>    通过指定安装antd版本，寻找无问题的antd版本可以安装无错误时间的antd版本，或者，依赖安装的prolayout中指定的antd版本。（到npm包仓库中找对应的版本包里的依赖项的版本）\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>1、&lt;&gt; 、&lt;React.Fragment&gt;与&lt;div&gt;。前两者作为代码块插入的form表单中，form表单无法获取其值，后者可以获得。</p>\n<h6 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h6><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// form表单获取值是通过内部最近的控件的onchange（）事件和value值获取，&lt;&gt; 和 &lt;React.Fragment&gt;中是没有onchange（）和value事件的，所以form.item无法获取内部控件的值，（对children进行最近的控件的onchange的事件监听）。而div控件是有onchange事件的。（onchage事件是冒泡）</span></span><br><span class=\"line\">    &lt;<span class=\"title class_\">Form</span>.<span class=\"property\">Item</span> name=<span class=\"string\">&quot;opterator&quot;</span> label=<span class=\"string\">&quot;操作人：&quot;</span>&gt;</span><br><span class=\"line\">                <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  console.log(&quot;gerd =&gt; &quot; ,e)</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  console.log(e);</span></span><br><span class=\"line\"><span class=\"language-xml\">                  e.stopPropagation(); //阻止冒泡后，获取不到值</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    // <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">width:</span> &#x27;<span class=\"attr\">75</span>%&#x27; &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入操作人&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">             &lt;/div&gt;</span><br><span class=\"line\">        &lt;/<span class=\"title class_\">Form</span>.<span class=\"property\">Item</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>2、antd的select的默认属性值在form表单中不起作用，获取的是undefined</p>\n<h6 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h6><blockquote>\n<p>form表单中控件的值默认初始化只能通过form的initialValues和setFieldsValue进行初始化，form.item内部控件中的defaultvalue值只能展示，但是当获取时，通过form的value为undefined。</p>\n</blockquote>\n<p>3、this.setstate({data}),为了代码的简略性，常常使用es6的特性。易出现state值发生了变化，但是render函数并未触发。</p>\n<h6 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h6><blockquote>\n<p>react的this.setstate方法在对象引用是需要注意，当对象中属性发生变化时，对象引用即发生变化，当数组对象中成员添加时，引用未发生变化。建议通过this.setstate({data: […data]})的方式，将数组拆分赋值，实现引用的变化来触发render函数。</p>\n</blockquote>\n<p>4、 当我们开发时，经常遇到antd中日期选择器的时间处理。</p>\n<h6 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过monent函数转化，当然，monent需要引入函数库；import monent from &#x27;monent&#x27;;</span></span><br><span class=\"line\">startDate = <span class=\"title function_\">moment</span>(value.<span class=\"property\">findDate</span>[<span class=\"number\">0</span>].<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class=\"comment\">// 转化为开始日期</span></span><br><span class=\"line\">endDate = <span class=\"title function_\">moment</span>(value.<span class=\"property\">findDate</span>[<span class=\"number\">1</span>].<span class=\"title function_\">format</span>(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class=\"comment\">// 转化为结束日期</span></span><br><span class=\"line\"><span class=\"comment\">// 此处的x为datepicker的value值哟。</span></span><br><span class=\"line\">日期=》时间戳： x.<span class=\"title function_\">unix</span>()</span><br><span class=\"line\">时间戳=》日期：<span class=\"title function_\">moment</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(x * <span class=\"number\">1000</span> ))</span><br></pre></td></tr></table></figure>\n<p>5、当需要实现带状态跳转页面时，实现进出返回页面的页面信息一致。</p>\n<h6 id=\"郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\"><a href=\"#郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\" class=\"headerlink\" title=\"郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。\"></a>郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。</h6><blockquote>\n<p>1）、redux<br>2）、将状态放在上级组件中存储<br>3）、放在sessionstorage或localstorage中存储</p>\n</blockquote>\n<p>优缺点：redux可避免状态外漏</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>redux</td>\n<td>避免状态信息的泄漏</td>\n<td>每次不可以刷新页面进入，需通过路由跳转才能获取props中redux的值</td>\n</tr>\n<tr>\n<td>2</td>\n<td>将状态放在上级组件中存储</td>\n<td>通过组件的props传值，获取值时机可靠</td>\n<td>组件间耦合关系太深，开发繁琐</td>\n</tr>\n<tr>\n<td>3</td>\n<td>放在sessionstorage或localstorage中存储</td>\n<td>存储值方便</td>\n<td>当页面跳转时，无法有效的删除storage和在session中泄露状态信息</td>\n</tr>\n<tr>\n<td>4</td>\n<td>放在url中存储</td>\n<td>方便页面跳转获取参数</td>\n<td>当状态信息过多时，超出url长度。对于泄漏参数信息可以通过加密实现，最简单的window.btoa()和window.atob();window.atob()进行加密</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6、&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;标签点击下，路由上会添加#，当有涉及到路由情况时要注意，比如umi的propmt控件，检测路由变化，当路由发生变化时才进入肉流程。反之不会。</span><br><span class=\"line\">    &lt;Prompt</span><br><span class=\"line\">      when=&#123;this.state.submit&#125; // sunmit为提交按钮状态 默认为false</span><br><span class=\"line\">      message=&#123;location =&gt; &#123;</span><br><span class=\"line\">        if (this.state.submit) &#123;</span><br><span class=\"line\">          Modal.confirm(&#123;</span><br><span class=\"line\">            icon: &lt;ExclamationCircleOutlined /&gt;,</span><br><span class=\"line\">            content: &#x27;暂未提交您所做的更改，是否提交&#x27;,</span><br><span class=\"line\">            okText: &#x27;继续加载&#x27;,</span><br><span class=\"line\">            cancelText: &#x27;取消&#x27;,</span><br><span class=\"line\">            onOk: () =&gt; &#123;</span><br><span class=\"line\">              this.setState(&#123; submit: false &#125;, () =&gt; &#123;</span><br><span class=\"line\">                this.props.history.push(`$&#123;location.pathname&#125;`);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            onCancel: () =&gt; &#123;&#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          return false; // 返回false时，阻塞路由跳转</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true; // 返回true时，路由跳转</span><br><span class=\"line\">      &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>7、永远不要修改this.state里的对象，要用lodash的cloneDeep实现对象隔离。chrome也是人写的，不可避免的存在错误，不要相信没问题的工具。能相信的只有自己。！！！！</p>\n<p>8、父组件向子组件传值，子组件的个别属性接收的是第一次组件的值。状态未刷新</p>\n<h6 id=\"解答-2\"><a href=\"#解答-2\" class=\"headerlink\" title=\"解答\"></a>解答</h6><pre><code>    react的diff是根据组件的key值和value进行对比是否进行更换的，没有key值易出现传a但是接受到的还是b，状态没有刷新的情况。\n</code></pre>\n<p> 9、定位问题，需要根据现有的情况进行定位。比如：当页面上路由展示不对时，应该尝试当url变化时，内容是否展示。是则是展示控件问题，通过查看版本锁，打包工具的不同对应的版本锁也不同。<br> 10、验签问题，验签实质时获取申请的资源通过计算出想要的字段放在头文件中，每次调用接口都带上。</p>\n<h6 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h6><pre><code>   当设计时间戳问题时，一般设置为前后三十秒。且为本机时间，这时候电脑时间要与网络同步，不然会验签不通过。\n</code></pre>\n<p>11、antd的版本包问题：antdesign/proprolayout依赖安装ant时，它默认安装最新的antd版本包。但是antd的版本包易出错，导致网站样式错误。</p>\n<h6 id=\"解答-3\"><a href=\"#解答-3\" class=\"headerlink\" title=\"解答\"></a>解答</h6><pre><code>    通过指定安装antd版本，寻找无问题的antd版本可以安装无错误时间的antd版本，或者，依赖安装的prolayout中指定的antd版本。（到npm包仓库中找对应的版本包里的依赖项的版本）\n</code></pre>\n"},{"title":"浏览器安全","date":"2022-05-24T01:12:51.000Z","_content":"# 浏览器安全\n\n## web网页安全\n\n### 同源策略\n\n- 协议、域名和端口都相同\n- 浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的\n- 主要表现在 DOM、Web 数据和网络这三个层面\n- 跨域共享数据\n\n\t- cros\n\n- 跨文档共享消息\n\n\t- 操作dom\n\t- postMessage\n\n### CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。\n\n### xss\n\n- 恶意代码注入攻击\n\n\t- 存储型攻击\n\n\t\t- 将恶意脚本发送给服务器，服务器存储在数据库中\n\n\t- 反射型攻击\n\n\t\t- 不存储，将恶意脚本由服务器再返回给浏览器\n\n\t- 基于 DOM 的 XSS 攻击\n\n\t\t- 在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据\n\n- 阻止策略\n\n\t- 原理：以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。\n\t- 1、服务器对输入脚本进行过滤或转码\n\t- 2. 充分利用 CSP\n\n\t\t- 限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个JavaScript 文件也是无法被加载的；\n\t\t- 禁止向第三方域提交数据，这样用户数据也不会外泄；禁止执行内联脚本和未授权的脚本；\n\t\t- 还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。\n\n\t- 3. 使用 HttpOnly 属性\n\n\t\t- 使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。\n\t\t- httpOnly由响应头设置\n\n###  CSRF 攻击，\n\n- CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事\n\n\t- 1、自动发送get请求\n\t- 2、自动发送post请求\n\t- 3、引诱用户点击链接\n\t- 和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。\n\n- 阻止攻击\n\n\t- 1. 充分利用好 Cookie 的 SameSite 属性\n\n\t\t- 在set-cookie时设置\n\t\t- strict\n\n\t\t\t- 完全禁止第三方站点请求带上cookie\n\n\t\t- lax\n\n\t\t\t- 运行get请求\n\n\t\t\t\t- post，img，iframe加载url时不允许的\n\n\t\t- none\n\n\t\t\t- 完全开放请求\n\n\t- 2. 验证请求的来源站点\n\n\t\t- Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。\n\t\t- Origin 和 Referer 的一个主要区别。\n\n\t\t\t- Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，\n\t\t\t- origin更优先\n\n\t- 3. CSRF Token\n\n\t\t- 有服务器想页面中注入csrf token，当在该页面发起请求时带上该信息\n\t\t- 第三方站点没有对应的csrf token\n\n## 浏览器系统安全\n\n### 安全沙箱\n![安全沙箱](安全沙箱.png)\n\n- 将渲染进程和操作系统隔离的这道墙就是我们要聊的安全沙箱。\n- 浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源的时候，需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。\n- 安全沙箱最小的保护单位是进程。\n\n![渲染进程与浏览器内核](渲染进程与浏览器内核.png) \n\n### 无法阻止xss，csrf的攻击\n\n## 浏览器网络安全\n\n![浏览器安全](浏览器安全.png)\n\n### https加解密\n\n- 对称加密\n\n\t- 对称加密是指加密和解密都使用的是相同的密钥。\n\n![对称加密](对称加密.png)\n\n- 非对称加密\n\n\t- 非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加\n密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来\n解密。\n\n![非对称加密](非对称加密.png)\n\n\t- 缺点\n\n\t\t- 第一个是非对称加密的效率太低。\n\t\t- 第二个是无法保证服务器发送给浏览器的数据安全。\n\n- 对称加密和非对称加密搭配使用\n\n\t- 在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输。\n\n![对称混合非对称加密](对称混合非对称加密.png)\n\n- 添加数字证书\n\n![数字证书](数字证书.png)\n\n\t- ca证书中包含公司信息，公钥，等。\n\t- ca签名，hash函数对ca证书中的信息生成信息摘要，私钥加密生成ca签名\n\n\t\t- 证书验证\n\n\t\t\t- 浏览器获取ca证书后，用同样的hash函数生成信息摘要，用公钥解密签名生成信息摘要2，两两对比\n\n","source":"_posts/浏览器安全.md","raw":"---\ntitle: 浏览器安全\ndate: 2022-05-24 09:12:51\ntags: 安全\ncategories: 前端\n---\n# 浏览器安全\n\n## web网页安全\n\n### 同源策略\n\n- 协议、域名和端口都相同\n- 浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的\n- 主要表现在 DOM、Web 数据和网络这三个层面\n- 跨域共享数据\n\n\t- cros\n\n- 跨文档共享消息\n\n\t- 操作dom\n\t- postMessage\n\n### CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。\n\n### xss\n\n- 恶意代码注入攻击\n\n\t- 存储型攻击\n\n\t\t- 将恶意脚本发送给服务器，服务器存储在数据库中\n\n\t- 反射型攻击\n\n\t\t- 不存储，将恶意脚本由服务器再返回给浏览器\n\n\t- 基于 DOM 的 XSS 攻击\n\n\t\t- 在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据\n\n- 阻止策略\n\n\t- 原理：以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。\n\t- 1、服务器对输入脚本进行过滤或转码\n\t- 2. 充分利用 CSP\n\n\t\t- 限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个JavaScript 文件也是无法被加载的；\n\t\t- 禁止向第三方域提交数据，这样用户数据也不会外泄；禁止执行内联脚本和未授权的脚本；\n\t\t- 还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。\n\n\t- 3. 使用 HttpOnly 属性\n\n\t\t- 使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。\n\t\t- httpOnly由响应头设置\n\n###  CSRF 攻击，\n\n- CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事\n\n\t- 1、自动发送get请求\n\t- 2、自动发送post请求\n\t- 3、引诱用户点击链接\n\t- 和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。\n\n- 阻止攻击\n\n\t- 1. 充分利用好 Cookie 的 SameSite 属性\n\n\t\t- 在set-cookie时设置\n\t\t- strict\n\n\t\t\t- 完全禁止第三方站点请求带上cookie\n\n\t\t- lax\n\n\t\t\t- 运行get请求\n\n\t\t\t\t- post，img，iframe加载url时不允许的\n\n\t\t- none\n\n\t\t\t- 完全开放请求\n\n\t- 2. 验证请求的来源站点\n\n\t\t- Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。\n\t\t- Origin 和 Referer 的一个主要区别。\n\n\t\t\t- Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，\n\t\t\t- origin更优先\n\n\t- 3. CSRF Token\n\n\t\t- 有服务器想页面中注入csrf token，当在该页面发起请求时带上该信息\n\t\t- 第三方站点没有对应的csrf token\n\n## 浏览器系统安全\n\n### 安全沙箱\n![安全沙箱](安全沙箱.png)\n\n- 将渲染进程和操作系统隔离的这道墙就是我们要聊的安全沙箱。\n- 浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源的时候，需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。\n- 安全沙箱最小的保护单位是进程。\n\n![渲染进程与浏览器内核](渲染进程与浏览器内核.png) \n\n### 无法阻止xss，csrf的攻击\n\n## 浏览器网络安全\n\n![浏览器安全](浏览器安全.png)\n\n### https加解密\n\n- 对称加密\n\n\t- 对称加密是指加密和解密都使用的是相同的密钥。\n\n![对称加密](对称加密.png)\n\n- 非对称加密\n\n\t- 非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加\n密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来\n解密。\n\n![非对称加密](非对称加密.png)\n\n\t- 缺点\n\n\t\t- 第一个是非对称加密的效率太低。\n\t\t- 第二个是无法保证服务器发送给浏览器的数据安全。\n\n- 对称加密和非对称加密搭配使用\n\n\t- 在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输。\n\n![对称混合非对称加密](对称混合非对称加密.png)\n\n- 添加数字证书\n\n![数字证书](数字证书.png)\n\n\t- ca证书中包含公司信息，公钥，等。\n\t- ca签名，hash函数对ca证书中的信息生成信息摘要，私钥加密生成ca签名\n\n\t\t- 证书验证\n\n\t\t\t- 浏览器获取ca证书后，用同样的hash函数生成信息摘要，用公钥解密签名生成信息摘要2，两两对比\n\n","slug":"浏览器安全","published":1,"updated":"2025-06-22T03:27:10.663Z","_id":"cmc703iqs000awvtk31ifguin","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浏览器安全\"><a href=\"#浏览器安全\" class=\"headerlink\" title=\"浏览器安全\"></a>浏览器安全</h1><h2 id=\"web网页安全\"><a href=\"#web网页安全\" class=\"headerlink\" title=\"web网页安全\"></a>web网页安全</h2><h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><ul>\n<li><p>协议、域名和端口都相同</p>\n</li>\n<li><p>浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的</p>\n</li>\n<li><p>主要表现在 DOM、Web 数据和网络这三个层面</p>\n</li>\n<li><p>跨域共享数据</p>\n<ul>\n<li>cros</li>\n</ul>\n</li>\n<li><p>跨文档共享消息</p>\n<ul>\n<li>操作dom</li>\n<li>postMessage</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSP-的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联-JavaScript-代码。\"><a href=\"#CSP-的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联-JavaScript-代码。\" class=\"headerlink\" title=\"CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。\"></a>CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。</h3><h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><ul>\n<li><p>恶意代码注入攻击</p>\n<ul>\n<li><p>存储型攻击</p>\n<ul>\n<li>将恶意脚本发送给服务器，服务器存储在数据库中</li>\n</ul>\n</li>\n<li><p>反射型攻击</p>\n<ul>\n<li>不存储，将恶意脚本由服务器再返回给浏览器</li>\n</ul>\n</li>\n<li><p>基于 DOM 的 XSS 攻击</p>\n<ul>\n<li>在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>阻止策略</p>\n<ul>\n<li><p>原理：以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。</p>\n</li>\n<li><p>1、服务器对输入脚本进行过滤或转码</p>\n</li>\n<li><ol start=\"2\">\n<li>充分利用 CSP</li>\n</ol>\n<ul>\n<li>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个JavaScript 文件也是无法被加载的；</li>\n<li>禁止向第三方域提交数据，这样用户数据也不会外泄；禁止执行内联脚本和未授权的脚本；</li>\n<li>还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>使用 HttpOnly 属性</li>\n</ol>\n<ul>\n<li>使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。</li>\n<li>httpOnly由响应头设置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSRF-攻击，\"><a href=\"#CSRF-攻击，\" class=\"headerlink\" title=\"CSRF 攻击，\"></a>CSRF 攻击，</h3><ul>\n<li><p>CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事</p>\n<ul>\n<li>1、自动发送get请求</li>\n<li>2、自动发送post请求</li>\n<li>3、引诱用户点击链接</li>\n<li>和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</li>\n</ul>\n</li>\n<li><p>阻止攻击</p>\n<ul>\n<li><ol>\n<li>充分利用好 Cookie 的 SameSite 属性</li>\n</ol>\n<ul>\n<li><p>在set-cookie时设置</p>\n</li>\n<li><p>strict</p>\n<ul>\n<li>完全禁止第三方站点请求带上cookie</li>\n</ul>\n</li>\n<li><p>lax</p>\n<ul>\n<li><p>运行get请求</p>\n<ul>\n<li>post，img，iframe加载url时不允许的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>none</p>\n<ul>\n<li>完全开放请求</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>验证请求的来源站点</li>\n</ol>\n<ul>\n<li><p>Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。</p>\n</li>\n<li><p>Origin 和 Referer 的一个主要区别。</p>\n<ul>\n<li>Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，</li>\n<li>origin更优先</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>CSRF Token</li>\n</ol>\n<ul>\n<li>有服务器想页面中注入csrf token，当在该页面发起请求时带上该信息</li>\n<li>第三方站点没有对应的csrf token</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"浏览器系统安全\"><a href=\"#浏览器系统安全\" class=\"headerlink\" title=\"浏览器系统安全\"></a>浏览器系统安全</h2><h3 id=\"安全沙箱\"><a href=\"#安全沙箱\" class=\"headerlink\" title=\"安全沙箱\"></a>安全沙箱</h3><p><img src=\"%E5%AE%89%E5%85%A8%E6%B2%99%E7%AE%B1.png\" alt=\"安全沙箱\"></p>\n<ul>\n<li>将渲染进程和操作系统隔离的这道墙就是我们要聊的安全沙箱。</li>\n<li>浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源的时候，需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。</li>\n<li>安全沙箱最小的保护单位是进程。</li>\n</ul>\n<p><img src=\"%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E4%B8%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png\" alt=\"渲染进程与浏览器内核\"> </p>\n<h3 id=\"无法阻止xss，csrf的攻击\"><a href=\"#无法阻止xss，csrf的攻击\" class=\"headerlink\" title=\"无法阻止xss，csrf的攻击\"></a>无法阻止xss，csrf的攻击</h3><h2 id=\"浏览器网络安全\"><a href=\"#浏览器网络安全\" class=\"headerlink\" title=\"浏览器网络安全\"></a>浏览器网络安全</h2><p><img src=\"%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8.png\" alt=\"浏览器安全\"></p>\n<h3 id=\"https加解密\"><a href=\"#https加解密\" class=\"headerlink\" title=\"https加解密\"></a>https加解密</h3><ul>\n<li><p>对称加密</p>\n<ul>\n<li>对称加密是指加密和解密都使用的是相同的密钥。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"对称加密\"></p>\n<ul>\n<li><p>非对称加密</p>\n<ul>\n<li>非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加<br>密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来<br>解密。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"非对称加密\"></p>\n<pre><code>- 缺点\n\n    - 第一个是非对称加密的效率太低。\n    - 第二个是无法保证服务器发送给浏览器的数据安全。\n</code></pre>\n<ul>\n<li><p>对称加密和非对称加密搭配使用</p>\n<ul>\n<li>在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E7%A7%B0%E6%B7%B7%E5%90%88%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"对称混合非对称加密\"></p>\n<ul>\n<li>添加数字证书</li>\n</ul>\n<p><img src=\"%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.png\" alt=\"数字证书\"></p>\n<pre><code>- ca证书中包含公司信息，公钥，等。\n- ca签名，hash函数对ca证书中的信息生成信息摘要，私钥加密生成ca签名\n\n    - 证书验证\n\n        - 浏览器获取ca证书后，用同样的hash函数生成信息摘要，用公钥解密签名生成信息摘要2，两两对比\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器安全\"><a href=\"#浏览器安全\" class=\"headerlink\" title=\"浏览器安全\"></a>浏览器安全</h1><h2 id=\"web网页安全\"><a href=\"#web网页安全\" class=\"headerlink\" title=\"web网页安全\"></a>web网页安全</h2><h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><ul>\n<li><p>协议、域名和端口都相同</p>\n</li>\n<li><p>浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的</p>\n</li>\n<li><p>主要表现在 DOM、Web 数据和网络这三个层面</p>\n</li>\n<li><p>跨域共享数据</p>\n<ul>\n<li>cros</li>\n</ul>\n</li>\n<li><p>跨文档共享消息</p>\n<ul>\n<li>操作dom</li>\n<li>postMessage</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSP-的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联-JavaScript-代码。\"><a href=\"#CSP-的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联-JavaScript-代码。\" class=\"headerlink\" title=\"CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。\"></a>CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。</h3><h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><ul>\n<li><p>恶意代码注入攻击</p>\n<ul>\n<li><p>存储型攻击</p>\n<ul>\n<li>将恶意脚本发送给服务器，服务器存储在数据库中</li>\n</ul>\n</li>\n<li><p>反射型攻击</p>\n<ul>\n<li>不存储，将恶意脚本由服务器再返回给浏览器</li>\n</ul>\n</li>\n<li><p>基于 DOM 的 XSS 攻击</p>\n<ul>\n<li>在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>阻止策略</p>\n<ul>\n<li><p>原理：以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。</p>\n</li>\n<li><p>1、服务器对输入脚本进行过滤或转码</p>\n</li>\n<li><ol start=\"2\">\n<li>充分利用 CSP</li>\n</ol>\n<ul>\n<li>限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个JavaScript 文件也是无法被加载的；</li>\n<li>禁止向第三方域提交数据，这样用户数据也不会外泄；禁止执行内联脚本和未授权的脚本；</li>\n<li>还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>使用 HttpOnly 属性</li>\n</ol>\n<ul>\n<li>使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。</li>\n<li>httpOnly由响应头设置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSRF-攻击，\"><a href=\"#CSRF-攻击，\" class=\"headerlink\" title=\"CSRF 攻击，\"></a>CSRF 攻击，</h3><ul>\n<li><p>CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事</p>\n<ul>\n<li>1、自动发送get请求</li>\n<li>2、自动发送post请求</li>\n<li>3、引诱用户点击链接</li>\n<li>和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</li>\n</ul>\n</li>\n<li><p>阻止攻击</p>\n<ul>\n<li><ol>\n<li>充分利用好 Cookie 的 SameSite 属性</li>\n</ol>\n<ul>\n<li><p>在set-cookie时设置</p>\n</li>\n<li><p>strict</p>\n<ul>\n<li>完全禁止第三方站点请求带上cookie</li>\n</ul>\n</li>\n<li><p>lax</p>\n<ul>\n<li><p>运行get请求</p>\n<ul>\n<li>post，img，iframe加载url时不允许的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>none</p>\n<ul>\n<li>完全开放请求</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>验证请求的来源站点</li>\n</ol>\n<ul>\n<li><p>Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。</p>\n</li>\n<li><p>Origin 和 Referer 的一个主要区别。</p>\n<ul>\n<li>Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，</li>\n<li>origin更优先</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>CSRF Token</li>\n</ol>\n<ul>\n<li>有服务器想页面中注入csrf token，当在该页面发起请求时带上该信息</li>\n<li>第三方站点没有对应的csrf token</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"浏览器系统安全\"><a href=\"#浏览器系统安全\" class=\"headerlink\" title=\"浏览器系统安全\"></a>浏览器系统安全</h2><h3 id=\"安全沙箱\"><a href=\"#安全沙箱\" class=\"headerlink\" title=\"安全沙箱\"></a>安全沙箱</h3><p><img src=\"%E5%AE%89%E5%85%A8%E6%B2%99%E7%AE%B1.png\" alt=\"安全沙箱\"></p>\n<ul>\n<li>将渲染进程和操作系统隔离的这道墙就是我们要聊的安全沙箱。</li>\n<li>浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源的时候，需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。</li>\n<li>安全沙箱最小的保护单位是进程。</li>\n</ul>\n<p><img src=\"%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E4%B8%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png\" alt=\"渲染进程与浏览器内核\"> </p>\n<h3 id=\"无法阻止xss，csrf的攻击\"><a href=\"#无法阻止xss，csrf的攻击\" class=\"headerlink\" title=\"无法阻止xss，csrf的攻击\"></a>无法阻止xss，csrf的攻击</h3><h2 id=\"浏览器网络安全\"><a href=\"#浏览器网络安全\" class=\"headerlink\" title=\"浏览器网络安全\"></a>浏览器网络安全</h2><p><img src=\"%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8.png\" alt=\"浏览器安全\"></p>\n<h3 id=\"https加解密\"><a href=\"#https加解密\" class=\"headerlink\" title=\"https加解密\"></a>https加解密</h3><ul>\n<li><p>对称加密</p>\n<ul>\n<li>对称加密是指加密和解密都使用的是相同的密钥。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"对称加密\"></p>\n<ul>\n<li><p>非对称加密</p>\n<ul>\n<li>非对称加密算法有 A、B 两把密钥，如果你用 A 密钥来加<br>密，那么只能使用 B 密钥来解密；反过来，如果你要 B 密钥来加密，那么只能用 A 密钥来<br>解密。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"非对称加密\"></p>\n<pre><code>- 缺点\n\n    - 第一个是非对称加密的效率太低。\n    - 第二个是无法保证服务器发送给浏览器的数据安全。\n</code></pre>\n<ul>\n<li><p>对称加密和非对称加密搭配使用</p>\n<ul>\n<li>在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"%E5%AF%B9%E7%A7%B0%E6%B7%B7%E5%90%88%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png\" alt=\"对称混合非对称加密\"></p>\n<ul>\n<li>添加数字证书</li>\n</ul>\n<p><img src=\"%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6.png\" alt=\"数字证书\"></p>\n<pre><code>- ca证书中包含公司信息，公钥，等。\n- ca签名，hash函数对ca证书中的信息生成信息摘要，私钥加密生成ca签名\n\n    - 证书验证\n\n        - 浏览器获取ca证书后，用同样的hash函数生成信息摘要，用公钥解密签名生成信息摘要2，两两对比\n</code></pre>\n"}],"PostAsset":[{"_id":"source/_posts/git/gitrebase.png","slug":"gitrebase.png","post":"cmc703iqj0000wvtk5whbhk3u","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/安全沙箱.png","slug":"安全沙箱.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/对称加密.png","slug":"对称加密.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/对称混合非对称加密.png","slug":"对称混合非对称加密.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/数字证书.png","slug":"数字证书.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/浏览器安全.png","slug":"浏览器安全.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/渲染进程与浏览器内核.png","slug":"渲染进程与浏览器内核.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0},{"_id":"source/_posts/浏览器安全/非对称加密.png","slug":"非对称加密.png","post":"cmc703iqs000awvtk31ifguin","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmc703iqp0004wvtk27390ltq","category_id":"cmc73ulad0000lrtk6bro3kqx","_id":"cmc73ulag0001lrtk92yo8but"},{"post_id":"cmc703iqq0005wvtkbaadd4si","category_id":"cmc73ulad0000lrtk6bro3kqx","_id":"cmc73vovq0000fbtkcv2bhno0"},{"post_id":"cmc703iqs000awvtk31ifguin","category_id":"cmc73ulad0000lrtk6bro3kqx","_id":"cmc73wt8c0000hjtkd81wd4ln"},{"post_id":"cmc703iqr0006wvtk5uh4334b","category_id":"cmc73ulad0000lrtk6bro3kqx","_id":"cmc73x1ht0001hjtk1fwqbeem"},{"post_id":"cmc703iqj0000wvtk5whbhk3u","category_id":"cmc73xulm0002hjtkfsf2bgfk","_id":"cmc73xulo0005hjtkdlyz1ydq"},{"post_id":"cmc703iqm0001wvtkgiwf9yy9","category_id":"cmc73ulad0000lrtk6bro3kqx","_id":"cmc73yd5h0007hjtkgfna3f6w"}],"PostTag":[{"post_id":"cmc703iqp0004wvtk27390ltq","tag_id":"cmc703iqt000dwvtk8fkqen55","_id":"cmc703iqv000hwvtk9pu3267b"},{"post_id":"cmc703iqq0005wvtkbaadd4si","tag_id":"cmc703iqu000gwvtk2488e8n9","_id":"cmc703iqv000kwvtkhcrhhzac"},{"post_id":"cmc703iqr0006wvtk5uh4334b","tag_id":"cmc703iqs0008wvtk7gr51p2r","_id":"cmc703iqw000mwvtkgue53zd6"},{"post_id":"cmc703iqs000awvtk31ifguin","tag_id":"cmc703iqw000lwvtkhgnsfiq1","_id":"cmc703iqw000nwvtkbqkza9qt"},{"post_id":"cmc703iqj0000wvtk5whbhk3u","tag_id":"cmc73xuln0003hjtk6gccb0zn","_id":"cmc73xulo0004hjtk0ge516gj"},{"post_id":"cmc703iqm0001wvtkgiwf9yy9","tag_id":"cmc73yd5g0006hjtk466ofaha","_id":"cmc73yd5i0008hjtkax9mfst3"}],"Tag":[{"name":"git javascript","_id":"cmc703iqp0003wvtk8pj0b4vo"},{"name":"持续更新（ing）","_id":"cmc703iqs0008wvtk7gr51p2r"},{"name":"后端接口","_id":"cmc703iqt000dwvtk8fkqen55"},{"name":"前端调接口下载","_id":"cmc703iqu000gwvtk2488e8n9"},{"name":"安全","_id":"cmc703iqw000lwvtkhgnsfiq1"},{"name":"git","_id":"cmc73xuln0003hjtk6gccb0zn"},{"name":"graphql","_id":"cmc73yd5g0006hjtk466ofaha"}]}}