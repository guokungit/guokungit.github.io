<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每天一个新问题（永远保持怀疑）</title>
    <link href="/2022/05/22/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E6%96%B0%E9%97%AE%E9%A2%98%EF%BC%88%E6%B0%B8%E8%BF%9C%E4%BF%9D%E6%8C%81%E6%80%80%E7%96%91%EF%BC%89/"/>
    <url>/2022/05/22/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E6%96%B0%E9%97%AE%E9%A2%98%EF%BC%88%E6%B0%B8%E8%BF%9C%E4%BF%9D%E6%8C%81%E6%80%80%E7%96%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>1、&lt;&gt; 、&lt;React.Fragment&gt;与&lt;div&gt;。前两者作为代码块插入的form表单中，form表单无法获取其值，后者可以获得。</p><h6 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// form表单获取值是通过内部最近的控件的onchange（）事件和value值获取，&lt;&gt; 和 &lt;React.Fragment&gt;中是没有onchange（）和value事件的，所以form.item无法获取内部控件的值，（对children进行最近的控件的onchange的事件监听）。而div控件是有onchange事件的。（onchage事件是冒泡）</span><br>    &lt;<span class="hljs-title class_">Form</span>.<span class="hljs-property">Item</span> name=<span class="hljs-string">&quot;opterator&quot;</span> label=<span class="hljs-string">&quot;操作人：&quot;</span>&gt;<br>                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span>=&gt;</span>&#123;</span><br><span class="language-xml">                  console.log(&quot;gerd =&gt; &quot; ,e)</span><br><span class="language-xml">                &#125;&#125;&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span>=&gt;</span>&#123;</span><br><span class="language-xml">                  console.log(e);</span><br><span class="language-xml">                  e.stopPropagation(); //阻止冒泡后，获取不到值</span><br><span class="language-xml">                &#125;&#125;&gt;</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    // <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> &#x27;<span class="hljs-attr">75</span>%&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入操作人&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/&gt;</span></span><br>             &lt;/div&gt;<br>        &lt;/<span class="hljs-title class_">Form</span>.<span class="hljs-property">Item</span>&gt;<br></code></pre></td></tr></table></figure><p>2、antd的select的默认属性值在form表单中不起作用，获取的是undefined</p><h6 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h6><blockquote><p>form表单中控件的值默认初始化只能通过form的initialValues和setFieldsValue进行初始化，form.item内部控件中的defaultvalue值只能展示，但是当获取时，通过form的value为undefined。</p></blockquote><p>3、this.setstate({data}),为了代码的简略性，常常使用es6的特性。易出现state值发生了变化，但是render函数并未触发。</p><h6 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h6><blockquote><p>react的this.setstate方法在对象引用是需要注意，当对象中属性发生变化时，对象引用即发生变化，当数组对象中成员添加时，引用未发生变化。建议通过this.setstate({data: […data]})的方式，将数组拆分赋值，实现引用的变化来触发render函数。</p></blockquote><p>4、 当我们开发时，经常遇到antd中日期选择器的时间处理。</p><h6 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 通过monent函数转化，当然，monent需要引入函数库；import monent from &#x27;monent&#x27;;</span><br>startDate = <span class="hljs-title function_">moment</span>(value.<span class="hljs-property">findDate</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class="hljs-comment">// 转化为开始日期</span><br>endDate = <span class="hljs-title function_">moment</span>(value.<span class="hljs-property">findDate</span>[<span class="hljs-number">1</span>].<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>));<span class="hljs-comment">// 转化为结束日期</span><br><span class="hljs-comment">// 此处的x为datepicker的value值哟。</span><br>日期=》时间戳： x.<span class="hljs-title function_">unix</span>()<br>时间戳=》日期：<span class="hljs-title function_">moment</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(x * <span class="hljs-number">1000</span> ))<br></code></pre></td></tr></table></figure><p>5、当需要实现带状态跳转页面时，实现进出返回页面的页面信息一致。</p><h6 id="郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。"><a href="#郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。" class="headerlink" title="郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。"></a>郭坤、史壮壮、徐雯等在林静第一次线下沟通时的讨论所得。</h6><blockquote><p>1）、redux<br>2）、将状态放在上级组件中存储<br>3）、放在sessionstorage或localstorage中存储</p></blockquote><p>优缺点：redux可避免状态外漏</p><table><thead><tr><th>序号</th><th>方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1</td><td>redux</td><td>避免状态信息的泄漏</td><td>每次不可以刷新页面进入，需通过路由跳转才能获取props中redux的值</td></tr><tr><td>2</td><td>将状态放在上级组件中存储</td><td>通过组件的props传值，获取值时机可靠</td><td>组件间耦合关系太深，开发繁琐</td></tr><tr><td>3</td><td>放在sessionstorage或localstorage中存储</td><td>存储值方便</td><td>当页面跳转时，无法有效的删除storage和在session中泄露状态信息</td></tr><tr><td>4</td><td>放在url中存储</td><td>方便页面跳转获取参数</td><td>当状态信息过多时，超出url长度。对于泄漏参数信息可以通过加密实现，最简单的window.btoa()和window.atob();window.atob()进行加密</td></tr></tbody></table><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-number">6</span>、&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;&lt;/a&gt;标签点击下，路由上会添加<span class="hljs-comment">#，当有涉及到路由情况时要注意，比如umi的propmt控件，检测路由变化，当路由发生变化时才进入肉流程。反之不会。</span><br>    &lt;Prompt<br>      <span class="hljs-keyword">when</span>=&#123;this.state.submit&#125; <span class="hljs-regexp">//</span> sunmit为提交按钮状态 默认为<span class="hljs-literal">false</span><br>      message=&#123;location =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (this.state.submit) &#123;<br>          Modal.confirm(&#123;<br>            icon: &lt;ExclamationCircleOutlined /&gt;,<br>            content: <span class="hljs-string">&#x27;暂未提交您所做的更改，是否提交&#x27;</span>,<br>            okText: <span class="hljs-string">&#x27;继续加载&#x27;</span>,<br>            cancelText: <span class="hljs-string">&#x27;取消&#x27;</span>,<br>            onOk: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>              this.setState(&#123; submit: <span class="hljs-literal">false</span> &#125;, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                this.props.history.push(`<span class="language-javascript">$&#123;location.<span class="hljs-property">pathname</span>&#125;</span>`);<br>              &#125;);<br>            &#125;,<br>            onCancel: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;&#125;,<br>          &#125;);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-regexp">//</span> 返回<span class="hljs-literal">false</span>时，阻塞路由跳转<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-regexp">//</span> 返回<span class="hljs-literal">true</span>时，路由跳转<br>      &#125;&#125;<br></code></pre></td></tr></table></figure><p>7、永远不要修改this.state里的对象，要用lodash的cloneDeep实现对象隔离。chrome也是人写的，不可避免的存在错误，不要相信没问题的工具。能相信的只有自己。！！！！</p><p>8、父组件向子组件传值，子组件的个别属性接收的是第一次组件的值。状态未刷新</p><h6 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h6><pre><code class="hljs">    react的diff是根据组件的key值和value进行对比是否进行更换的，没有key值易出现传a但是接受到的还是b，状态没有刷新的情况。</code></pre><p> 9、定位问题，需要根据现有的情况进行定位。比如：当页面上路由展示不对时，应该尝试当url变化时，内容是否展示。是则是展示控件问题，通过查看版本锁，打包工具的不同对应的版本锁也不同。<br> 10、验签问题，验签实质时获取申请的资源通过计算出想要的字段放在头文件中，每次调用接口都带上。</p><h6 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h6><pre><code class="hljs">   当设计时间戳问题时，一般设置为前后三十秒。且为本机时间，这时候电脑时间要与网络同步，不然会验签不通过。</code></pre><p>11、antd的版本包问题：antdesign/proprolayout依赖安装ant时，它默认安装最新的antd版本包。但是antd的版本包易出错，导致网站样式错误。</p><h6 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h6><pre><code class="hljs">    通过指定安装antd版本，寻找无问题的antd版本可以安装无错误时间的antd版本，或者，依赖安装的prolayout中指定的antd版本。（到npm包仓库中找对应的版本包里的依赖项的版本）</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>持续更新中（ing）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react前端下载后端返回的文件方法（url、二进制流）</title>
    <link href="/2022/05/22/react%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%EF%BC%88url%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81%EF%BC%89/"/>
    <url>/2022/05/22/react%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%EF%BC%88url%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前端下载文件有两种方式："><a href="#前端下载文件有两种方式：" class="headerlink" title="前端下载文件有两种方式："></a>前端下载文件有两种方式：</h3><p>1、通过后端返回的url，前端通过window.open(url);<br>2、后端返回的是二进制流，通过a标签实现下载。</p><h5 id="方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。"><a href="#方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window-open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。" class="headerlink" title="方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。"></a>方法一：后端将静态资源放在了cdn上，返回cdn上的网址给前端。前端的window.open方法打开url时，浏览器判断当前url是资源还是页面，当是资源时进行下载，否则展示页面。</h5><h5 id="方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。"><a href="#方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。" class="headerlink" title="方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。"></a>方法二：后端返回二进制流。将二进制流封装成blob，这种的不推荐，当当前网速不好时，下载的数据易出错。</h5><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs qml">axios(&#123;<br>      <span class="hljs-attribute">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attribute">url</span>: <span class="hljs-string">&#x27;/api/trust/auditDownload&#x27;</span>, <span class="hljs-comment">//此处放hobber的内部的url</span><br>      <span class="hljs-attribute">data</span>: params,<br>      <span class="hljs-attribute">responseType</span>: <span class="hljs-string">&#x27;arraybuffer&#x27;</span>, <span class="hljs-comment">// 需要制定返回的类型，否则下载的文件会乱码</span><br>    &#125;).then(res =&gt; &#123;<br>      <span class="hljs-comment">// 假设 data 是返回来的二进制数据</span><br>      <span class="hljs-keyword">const</span> data = res.data;<br>      <span class="hljs-keyword">const</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">window</span>.URL.createObjectURL( <span class="hljs-comment">// type指定下载的文件的格式</span><br>        <span class="hljs-keyword">new</span> Blob([data], &#123;<br>          <span class="hljs-attribute">type</span>:<br>            <span class="hljs-string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,<br>        &#125;),<br>      );<br>      <span class="hljs-keyword">const</span> link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>      link.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>      link.href = <span class="hljs-built_in">url</span>;<br>      link.setAttribute(<span class="hljs-string">&#x27;download&#x27;</span>, <span class="hljs-string">&#x27;excel.xlsx&#x27;</span>); <span class="hljs-comment">// 设置下载的文件名</span><br>      <span class="hljs-built_in">document</span>.body.appendChild(link); <br>      link.click(); <span class="hljs-comment">// 触发a标签</span><br>      <span class="hljs-built_in">document</span>.body.removeChild(link); <span class="hljs-comment">// 删除标签</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h5 id="方法三、将二进制数据封装为文件读取FileReader对象"><a href="#方法三、将二进制数据封装为文件读取FileReader对象" class="headerlink" title="方法三、将二进制数据封装为文件读取FileReader对象"></a>方法三、将二进制数据封装为文件读取FileReader对象</h5><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> download = (res) =&gt; &#123;<br>  <span class="hljs-comment">// 创建文件对象</span><br>  <span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> FileReader()<br>  <span class="hljs-comment">// 监听读取完毕</span><br>  reader.onloadend = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 返回base64位的文件内容</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">url</span> = reader.result<br>    <span class="hljs-comment">// 下载</span><br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-built_in">url</span><br>  &#125;<br>  <span class="hljs-comment">// 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。</span><br>  reader.readAsDataURL(res)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意： 使用 FileReader对象封装二进制流之后没办法设置下载的文件名，默认文件名为下载，文件格式根据读取的是请求返回的content-type。</p><h5 id="方法四、使用插件file-saver"><a href="#方法四、使用插件file-saver" class="headerlink" title="方法四、使用插件file-saver"></a>方法四、使用插件file-saver</h5><p>下载插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> --save <span class="hljs-keyword">file</span>-saver<br></code></pre></td></tr></table></figure><p>引入插件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;file-saver&#x27;</span><br></code></pre></td></tr></table></figure><p>封装下载方法，使用插件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> downloadFile = (res, <span class="hljs-keyword">type</span>, filename) =&gt; &#123;<br>  <span class="hljs-comment">// 将二进制数据封装成blob对象</span><br>   <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([res], &#123;<br>    <span class="hljs-keyword">type</span>: <span class="hljs-keyword">type</span><br>  &#125;)<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    这里也可以使用File对象封装二进制数据</span><br><span class="hljs-comment">    const file = new File([res], filename, &#123;</span><br><span class="hljs-comment">      type: type</span><br><span class="hljs-comment">    &#125;);</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">// 调用插件方法</span><br>  saveAs(blob,filename)<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/eligrey/FileSaver.js">插件源码</a></p><h5 id="方法五、使用插件downloadjs"><a href="#方法五、使用插件downloadjs" class="headerlink" title="方法五、使用插件downloadjs"></a>方法五、使用插件downloadjs</h5><p>下载插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save downloadjs</span><br></code></pre></td></tr></table></figure><p>引入插件</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">download</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;downloadjs&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>因为downloadjs源码中没有通过export导出download方法，而是通过return的方式返回download方法，因为需要使用require来引入文件。</p><p>封装下载方法，使用插件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">downloadFile</span> = (<span class="hljs-params">res, <span class="hljs-keyword">type</span>, filename</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 将二进制流转成blob对象</span><br>  <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([res], &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-keyword">type</span><br>  &#125;)<br>  <span class="hljs-comment">// 调用插件方法</span><br>  <span class="hljs-title function_">download</span>(blob, filename, <span class="hljs-keyword">type</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://github.com/rndme/download">插件源码</a></p><h5 id="二、发送请求，获取二进制流数据"><a href="#二、发送请求，获取二进制流数据" class="headerlink" title="二、发送请求，获取二进制流数据"></a>二、发送请求，获取二进制流数据</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml">// index.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handleDownload&#x27;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 引入下载方法</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;download&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">async</span> downloadFile () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxxx/xxxx&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置返回数据类型，这里一定要设置，否则下载下来的文件会是空白,也可以是`arraybuffer`</span></span><br><span class="language-javascript">        <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;blob&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;xxxxxx&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      )</span><br><span class="language-javascript">      <span class="hljs-comment">// 获取在response headers中返回的下载文件类型</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> type = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">headers</span>)[<span class="hljs-string">&#x27;content-type&#x27;</span>]</span><br><span class="language-javascript">      </span><br><span class="language-javascript">      <span class="hljs-comment">/*获取在response headers中返回的下载文件名</span></span><br><span class="hljs-comment"><span class="language-javascript">        因为返回文件名是通过encodeURIComponent()函数进行了编码，因此需要通过decodeURIComponent()函数解码</span></span><br><span class="hljs-comment"><span class="language-javascript">      */</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> fileName = <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">headers</span>)[<span class="hljs-string">&#x27;file-name&#x27;</span>])</span><br><span class="language-javascript">      <span class="hljs-comment">// 调用封装好的下载函数</span></span><br><span class="language-javascript">      <span class="hljs-title function_">download</span>(res, type, fileName)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 点击下载按钮下载</span></span><br><span class="language-javascript">    <span class="hljs-title function_">handleDownload</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">downloadFile</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>下载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端调接口下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>检测后端接口常见方法</title>
    <link href="/2022/05/22/%E6%A3%80%E6%B5%8B%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/22/%E6%A3%80%E6%B5%8B%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="痛点，常常由于不知道后端接口是否可用而苦恼"><a href="#痛点，常常由于不知道后端接口是否可用而苦恼" class="headerlink" title="痛点，常常由于不知道后端接口是否可用而苦恼"></a>痛点，常常由于不知道后端接口是否可用而苦恼</h3><h4 id="方法一：curl实现，post请求"><a href="#方法一：curl实现，post请求" class="headerlink" title="方法一：curl实现，post请求"></a>方法一：curl实现，post请求</h4><pre><code class="hljs">1、复制浏览器的curl链接，2、用后端服务器地址和接口地址拼接替换掉curl中的请求地址3、删除掉原有的orgin和referer字段，-H 请求头--data-row：请求体-x：请求协议</code></pre><h4 id="方法二：通过浏览器网址直接访问，get请求"><a href="#方法二：通过浏览器网址直接访问，get请求" class="headerlink" title="方法二：通过浏览器网址直接访问，get请求"></a>方法二：通过浏览器网址直接访问，get请求</h4><pre><code class="hljs">1、用后端服务器地址和接口地址拼接替换掉curl中的请求地址容易由于鉴权问题出现错误。</code></pre><h4 id="方法三：通过postman调用接口"><a href="#方法三：通过postman调用接口" class="headerlink" title="方法三：通过postman调用接口"></a>方法三：通过postman调用接口</h4><pre><code class="hljs">1、配置后端的域名和接口地址环境2、配置请求头3、配置请求体</code></pre>]]></content>
    
    
    <categories>
      
      <category>后端接口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实战中开发git</title>
    <link href="/2022/05/22/git/"/>
    <url>/2022/05/22/git/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><p>git init</p><h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>git clone git地址</p><h2 id="设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置"><a href="#设置用户名和邮箱-–global-为全局参数，表明本地所有Git仓库都会使用这个配置" class="headerlink" title="设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)"></a>设置用户名和邮箱(–global 为全局参数，表明本地所有Git仓库都会使用这个配置)</h2><p>git config –global user,name “用户名”<br>git config –global user.email “用户邮箱”</p><h2 id="链接远程仓库"><a href="#链接远程仓库" class="headerlink" title="链接远程仓库"></a>链接远程仓库</h2><p>git remote add origin git地址</p><h3 id="当修改密码后需要git-push-时报http-denied错误时"><a href="#当修改密码后需要git-push-时报http-denied错误时" class="headerlink" title="当修改密码后需要git push 时报http denied错误时"></a>当修改密码后需要git push 时报http denied错误时</h3><p>输入”git config –system –unset credential.helper”命令（重置远程端的用户名和密码）<br>或<br>git config –global http.emptyAuth true </p><h3 id="当本地查看远程分支时"><a href="#当本地查看远程分支时" class="headerlink" title="当本地查看远程分支时"></a>当本地查看远程分支时</h3><h3 id="git-fetch-origin。拉取远程分支列表"><a href="#git-fetch-origin。拉取远程分支列表" class="headerlink" title="** git fetch origin。拉取远程分支列表"></a>** git fetch origin。拉取远程分支列表</h3><table><thead><tr><th>git branch</th><th></th><th></th></tr></thead><tbody><tr><td></td><td>空</td><td>查看本地分支</td></tr><tr><td></td><td>-r</td><td>查看远程分支</td></tr><tr><td></td><td>-a</td><td>查看全部焚毁</td></tr></tbody></table><h1 id="撤销git-add-的方法-gt-git-restore"><a href="#撤销git-add-的方法-gt-git-restore" class="headerlink" title="撤销git add . 的方法 -&gt; git restore ."></a>撤销git add . 的方法 -&gt; git restore .</h1><h2 id="撤销git-commit-m-“注释”，"><a href="#撤销git-commit-m-“注释”，" class="headerlink" title="撤销git commit -m “注释”，"></a>撤销git commit -m “注释”，</h2><table><thead><tr><th>git reset</th><th>–hard</th><th>删除工作空间改动代码，撤销git add，撤销commit . 注意完成这个操作后，就恢复到了上一次的commit状态。</th></tr></thead><tbody><tr><td></td><td>–mixed</td><td>不删除工作空间改动代码，撤销git add，撤销commit .为默认参数,git reset –mixed HEAD^==git reset HEAD^</td></tr><tr><td></td><td>–sort</td><td>不删除工作空间改动代码，不撤销git add ，撤销commit</td></tr><tr><td>git commit</td><td>–amend</td><td>如果commit注释写错了，改一下注释</td></tr></tbody></table><h2 id="推送仓库"><a href="#推送仓库" class="headerlink" title="推送仓库"></a>推送仓库</h2><table><thead><tr><th>git push</th><th>-u</th><th>建立+推送远程分支</th></tr></thead><tbody><tr><td></td><td>-f</td><td>强制覆盖远程分支</td></tr></tbody></table><h3 id="暂时存储工作区代码，（可以在分支间横跳代码）"><a href="#暂时存储工作区代码，（可以在分支间横跳代码）" class="headerlink" title="暂时存储工作区代码，（可以在分支间横跳代码）"></a>暂时存储工作区代码，（可以在分支间横跳代码）</h3><table><thead><tr><th>git stash save “save message”</th><th>执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</th></tr></thead><tbody><tr><td>git stash list</td><td>查看stash了哪些存储</td></tr><tr><td>git stash show</td><td>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</td></tr><tr><td>git stash show -p</td><td>显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p</td></tr><tr><td>git stash apply</td><td>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}</td></tr><tr><td>git stash pop</td><td>命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</td></tr><tr><td>git stash drop stash@{$num}</td><td>丢弃stash@{$num}存储，从列表中删除这个存储</td></tr><tr><td>git stash clear</td><td>删除所有缓存的stash</td></tr></tbody></table><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><p>git branch test: 基于当前commit创建test分支。.git/HEAD 文件中记录了当前分支名字。<br>git checkout -b test; 创建并切换到test分支</p><h1 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h1><p>git branch -d test：删除本地test分支</p><p>git branch -D test： test分支还没有合入当前分支，所以要用-D参数才能删掉。</p><p>git push origin –delete test 删除远程test分支</p><p>git push origin :test 删除远程test分支</p><h1 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h1><table><thead><tr><th>git</th><th>branch</th><th>空</th><th>列出当前分支清单</th></tr></thead><tbody><tr><td></td><td></td><td>-r</td><td>查看远程分支</td></tr><tr><td></td><td></td><td>-a</td><td>查看远程分支和本地分支</td></tr><tr><td></td><td></td><td>-v</td><td>查看各个分支最后一个提交信息</td></tr><tr><td></td><td></td><td>–merged</td><td>查看哪些分支已经合并入当前分支</td></tr></tbody></table><h1 id="拉取分支"><a href="#拉取分支" class="headerlink" title="拉取分支"></a>拉取分支</h1><p>git fetch origin 同步远程服务器的数据到本地</p><p>git checkout -b test origin/test_remote 将远程分支test_remote拉取下来到本地test分支</p><p>git checkout test 将远程分支test拉取下来到本地test分支</p><p>git pull test从远程分支test 中checkout下来的本地分支test成为跟踪分支，使用git pull或者git push就会操作到对应的远程分支test</p><h2 id="git-merge的参数"><a href="#git-merge的参数" class="headerlink" title="git merge的参数"></a>git merge的参数</h2><p>merge的两个分支要有历史关联，没有的话需要添加git merge master –allow-unrelated-histories，参数。</p><table><thead><tr><th>git</th><th>merge</th><th></th><th>合并分支到当前分支</th></tr></thead><tbody><tr><td></td><td></td><td>–ff</td><td>快速合并，这个是默认的参数。如果合并过程出现冲突，Git会显示出冲突并等待手动解决</td></tr><tr><td></td><td></td><td>–ff-only</td><td>只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge</td></tr><tr><td></td><td></td><td>–no-ff</td><td>不使用快速合并。会生成一次新的提交记录，这个记录只是标识在这里进行了一次merge操作（目前还没想到应用场景）</td></tr><tr><td></td><td></td><td>–squash</td><td>压缩合并。将待合并的分支的内容压缩成一个新的提交合并进来</td></tr></tbody></table><h2 id="git-rebase的参数"><a href="#git-rebase的参数" class="headerlink" title="git rebase的参数"></a>git rebase的参数</h2><table><thead><tr><th>git</th><th>rebase</th><th>分布湿合并分支</th></tr></thead><tbody><tr><td>-i HEAD~num</td><td>合并后num个commit记录</td><td>p表示采用，s表示将当前commit合并到上一commit，d表示删除当前commit，。。。</td></tr><tr><td>-i [start] [end]</td><td>左开右闭</td><td>start和end分别代码commit id</td></tr><tr><td>-i [start] [end]</td><td>onto [newbase]</td><td>将部分分支复制到新commit上，实现中间一大段commit的删除</td></tr><tr><td>通过git rebase -i [start] [end] 或者 git rebase -i HEAD~num将本地的多次提交合并为一个，以简化提交历史。(左开右闭)</td><td></td><td></td></tr></tbody></table><p><img src="gitrebase.png" alt="截屏2021-12-01 18.38.28.png"><br>在用d时可删除部分分支。s时前面得有pick，<br>本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)</p><h3 id="复制部分分支"><a href="#复制部分分支" class="headerlink" title="复制部分分支"></a>复制部分分支</h3><p>git rebase [startpoint] [endpoint] --onto [branchName] （[startpoint] [endpoint]指定的是一个前开后闭的区间，将该区间中的分支复制到另一个分支上）<br>运行git rebase –continue命令继续变基。<br>运行git rebase –abort命令回到rebase之前的状态。<br>个人见解，rebase就是操作本地的提交记录实现对commit的简化。git rebase branchname，在次合并分支，解决冲突，将冲突解决在开发分支上，避免主分支上出现脏分支记录。</p><h1 id="git-commit-记录查询"><a href="#git-commit-记录查询" class="headerlink" title="git commit 记录查询"></a>git commit 记录查询</h1><table><thead><tr><th>git</th><th>show</th><th>空</th><th>.查看最新的commit</th></tr></thead><tbody><tr><td></td><td></td><td>commitId</td><td>.查看指定commit hashID的所有修改：</td></tr><tr><td></td><td></td><td>commitId fileName</td><td>.查看某次commit中具体某个文件的修改：</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/22/hello-world/"/>
    <url>/2022/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
